{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar isServer = false;\n\nvar _default = /*#__PURE__*/function (_react$Component) {\n  (0, _inherits2[\"default\"])(_default, _react$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, _default);\n    _this = _super.call(this, props);\n    _this._hasHeadManager = void 0;\n\n    _this.emitChange = function () {\n      if (_this._hasHeadManager) {\n        _this.props.headManager.updateHead(_this.props.reduceComponentsToState((0, _toConsumableArray2[\"default\"])(_this.props.headManager.mountedInstances), _this.props));\n      }\n    };\n\n    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;\n\n    if (isServer && _this._hasHeadManager) {\n      _this.props.headManager.mountedInstances.add((0, _assertThisInitialized2[\"default\"])(_this));\n\n      _this.emitChange();\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(_default, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances.add(this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.emitChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._hasHeadManager) {\n        this.props.headManager.mountedInstances[\"delete\"](this);\n      }\n\n      this.emitChange();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return _default;\n}(_react.Component);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../next-server/lib/side-effect.tsx"],"names":["isServer","Component","_hasHeadManager","emitChange","constructor","componentDidMount","componentDidUpdate","componentWillUnmount","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAMA,QAAN,QAAA;;IAce,Q;;;;;AAcbI,WAAAA,QAAAA,CAAAA,KAAAA,EAAwB;AAAA,QAAA,KAAA;;AAAA,qCAAA,IAAA,EAAA,QAAA;AACtB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;AADsB,IAAA,KAAA,CAbhBF,eAagB,GAAA,KAAA,CAAA;;AAAA,IAAA,KAAA,CAXxBC,UAWwB,GAXX,YAAY;AACvB,UAAI,KAAA,CAAJ,eAAA,EAA0B;AACxB,QAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,UAAA,CACE,KAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,oCACM,KAAA,CAAA,KAAA,CAAA,WAAA,CADN,gBAAA,CAAA,EAEE,KAAA,CAHJ,KACE,CADF;AAOH;AAEuB,KAAA;;AAEtB,IAAA,KAAA,CAAA,eAAA,GACE,KAAA,CAAA,KAAA,CAAA,WAAA,IAA0B,KAAA,CAAA,KAAA,CAAA,WAAA,CAD5B,gBAAA;;AAGA,QAAIH,QAAQ,IAAI,KAAA,CAAhB,eAAA,EAAsC;AACpC,MAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,wCAAA,KAAA,CAAA;;AACA,MAAA,KAAA,CAAA,UAAA;AAEH;;AATuB,WAAA,KAAA;AAUxBK;;;;wCAAoB;AAClB,UAAI,KAAJ,eAAA,EAA0B;AACxB,aAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,IAAA;AAEF;;AAAA,WAAA,UAAA;AAEFC;;;yCAAqB;AACnB,WAAA,UAAA;AAEFC;;;2CAAuB;AACrB,UAAI,KAAJ,eAAA,EAA0B;AACxB,aAAA,KAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,IAAA;AAEF;;AAAA,WAAA,UAAA;AAGFC;;;6BAAS;AACP,aAAA,IAAA;AAzCoD;;;EAA3BP,MAAAA,CAAAA,S","sourcesContent":["import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = JSX.Element[] | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  headManager: any\n  inAmpMode?: boolean\n}\n\nexport default class extends Component<SideEffectProps> {\n  private _hasHeadManager: boolean\n\n  emitChange = (): void => {\n    if (this._hasHeadManager) {\n      this.props.headManager.updateHead(\n        this.props.reduceComponentsToState(\n          [...this.props.headManager.mountedInstances],\n          this.props\n        )\n      )\n    }\n  }\n\n  constructor(props: any) {\n    super(props)\n    this._hasHeadManager =\n      this.props.headManager && this.props.headManager.mountedInstances\n\n    if (isServer && this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n      this.emitChange()\n    }\n  }\n  componentDidMount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.add(this)\n    }\n    this.emitChange()\n  }\n  componentDidUpdate() {\n    this.emitChange()\n  }\n  componentWillUnmount() {\n    if (this._hasHeadManager) {\n      this.props.headManager.mountedInstances.delete(this)\n    }\n    this.emitChange()\n  }\n\n  render() {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}