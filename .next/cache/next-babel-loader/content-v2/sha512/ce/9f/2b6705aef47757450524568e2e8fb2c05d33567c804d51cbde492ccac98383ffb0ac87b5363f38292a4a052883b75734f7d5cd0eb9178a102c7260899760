{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault2 = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault2(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault2(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault2(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _slicedToArray2 = _interopRequireDefault2(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault2(require(\"@babel/runtime/regenerator\"));\n\nexports.__esModule = true;\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\n\nvar _routeLoader = require(\"../../../client/route-loader\");\n\nvar _denormalizePagePath = require(\"../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = require(\"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\n\nvar _utils = require(\"../utils\");\n\nvar _isDynamic = require(\"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\n\nvar _querystring = require(\"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = require(\"./utils/route-matcher\");\n\nvar _routeRegex = require(\"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/* global __NEXT_DATA__ */\n// tslint:disable:no-console\n\n\nvar detectDomainLocale;\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale').detectDomainLocale;\n}\n\nvar basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : \"\".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || (0, _normalizeLocalePath.normalizeLocalePath)(path, locales).detectedLocale;\n    var detectedDomain = detectDomainLocale(domainLocales, undefined, locale);\n\n    if (detectedDomain) {\n      return \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(basePath || '').concat(locale === detectedDomain.defaultLocale ? '' : \"/\".concat(locale)).concat(path);\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale && locale !== defaultLocale && !path.startsWith('/' + locale + '/') && path !== '/' + locale ? addPathPrefix(path, '/' + locale) : path;\n  }\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale && (path.startsWith('/' + locale + '/') || path === '/' + locale) ? path.substr(locale.length + 1) || '/' : path;\n  }\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  var queryIndex = path.indexOf('?');\n  var hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = \"/\".concat(path);\n  return path;\n}\n/**\n* Detects whether a given url is routable by the Next.js router (browser only).\n*/\n\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    var locationOrigin = (0, _utils.getLocationOrigin)();\n    var resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  var interpolatedRoute = '';\n  var dynamicRegex = (0, _routeRegex.getRouteRegex)(route);\n  var dynamicGroups = dynamicRegex.groups;\n  var dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  var params = Object.keys(dynamicGroups);\n\n  if (!params.every(function (param) {\n    var value = dynamicMatches[param] || '';\n    var _dynamicGroups$param = dynamicGroups[param],\n        repeat = _dynamicGroups$param.repeat,\n        optional = _dynamicGroups$param.optional; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    var replaced = \"[\".concat(repeat ? '...' : '').concat(param, \"]\");\n\n    if (optional) {\n      replaced = \"\".concat(!value ? '/' : '', \"[\").concat(replaced, \"]\");\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present\n    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    function (segment) {\n      return encodeURIComponent(segment);\n    }).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = ''; // did not satisfy all requirements\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params: params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  var filteredQuery = {};\n  Object.keys(query).forEach(function (key) {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n/**\n* Resolves a given hyperlink with a certain router state (basePath not included).\n* Preserves absolute urls.\n*/\n\n\nfunction resolveHref(currentPath, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  var base = new URL(currentPath, 'http://n');\n  var urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    var finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);\n    var interpolatedAs = '';\n\n    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      var query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n\n      var _interpolateAs = interpolateAs(finalUrl.pathname, finalUrl.pathname, query),\n          result = _interpolateAs.result,\n          params = _interpolateAs.params;\n\n      if (result) {\n        interpolatedAs = (0, _utils.formatWithValidation)({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  var origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var _resolveHref = resolveHref(router.pathname, url, true),\n      _resolveHref2 = (0, _slicedToArray2[\"default\"])(_resolveHref, 2),\n      resolvedHref = _resolveHref2[0],\n      resolvedAs = _resolveHref2[1];\n\n  var origin = (0, _utils.getLocationOrigin)();\n  var hrefHadOrigin = resolvedHref.startsWith(origin);\n  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  var preparedAs = as ? stripOrigin(resolveHref(router.pathname, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(parsedHref, pages) {\n  var applyBasePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var pathname = parsedHref.pathname;\n  var cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return parsedHref;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(function (page) {\n      if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n        parsedHref.pathname = applyBasePath ? addBasePath(page) : page;\n        return true;\n      }\n    });\n  }\n\n  parsedHref.pathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)(parsedHref.pathname);\n  return parsedHref;\n}\n\nvar manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && true && 'scrollRestoration' in window.history && !!function () {\n  try {\n    var v = '__next'; // eslint-disable-next-line no-sequences\n\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nvar SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(function (res) {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(function (data) {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(\"Failed to load static props\");\n        });\n      }\n\n      throw new Error(\"Failed to load static props\");\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1)[\"catch\"](function (err) {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader.markAssetError)(err);\n    }\n\n    throw err;\n  });\n}\n\nvar Router = /*#__PURE__*/function () {\n  /**\n  * Map of all components loaded in `Router`\n  */\n  // Static Data Cache\n  // In-flight Server Data Requests, for deduping\n  function Router(_pathname, _query, _as, _ref) {\n    var _this = this;\n\n    var initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        wrapApp = _ref.wrapApp,\n        Component = _ref.Component,\n        err = _ref.err,\n        subscription = _ref.subscription,\n        isFallback = _ref.isFallback,\n        locale = _ref.locale,\n        locales = _ref.locales,\n        defaultLocale = _ref.defaultLocale,\n        domainLocales = _ref.domainLocales,\n        isPreview = _ref.isPreview;\n    (0, _classCallCheck2[\"default\"])(this, Router);\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sdr = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n    this.locale = void 0;\n    this.locales = void 0;\n    this.defaultLocale = void 0;\n    this.domainLocales = void 0;\n    this.isReady = void 0;\n    this.isPreview = void 0;\n    this.isLocaleDomain = void 0;\n    this._idx = 0;\n\n    this.onPopState = function (e) {\n      var state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname2 = _this.pathname,\n            query = _this.query;\n\n        _this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname2),\n          query: query\n        }), (0, _utils.getURL)());\n\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      var forcedScroll;\n      var url = state.url,\n          as = state.as,\n          options = state.options,\n          idx = state.idx;\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          if (_this._idx !== idx) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem('__next_scroll_' + _this._idx, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch (_unused) {} // Restore old scroll position:\n\n\n            try {\n              var v = sessionStorage.getItem('__next_scroll_' + idx);\n              forcedScroll = JSON.parse(v);\n            } catch (_unused2) {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n\n      _this._idx = idx;\n\n      var _ref2 = (0, _parseRelativeUrl.parseRelativeUrl)(url),\n          pathname = _ref2.pathname; // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (_this.isSsr && as === _this.asPath && pathname === _this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(state)) {\n        return;\n      }\n\n      _this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && _this._shallow,\n        locale: options.locale || _this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component: Component,\n        initial: true,\n        props: initialProps,\n        err: err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    var autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale;\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n      this.domainLocales = domainLocales;\n      this.isLocaleDomain = !!detectDomainLocale(domainLocales, self.location.hostname);\n    }\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)(), {\n          locale: locale\n        });\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n        }\n      }\n    }\n  }\n\n  (0, _createClass2[\"default\"])(Router, [{\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n    * Go back in history\n    */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"push\",\n    value: function push(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        // TODO: remove in the future when we update history before route change\n        // is complete, as the popstate event should handle this capture.\n        if (manualScrollRestoration) {\n          try {\n            // Snapshot scroll position right before navigating to a new page:\n            sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n              x: self.pageXOffset,\n              y: self.pageYOffset\n            }));\n          } catch (_unused3) {}\n        }\n      }\n\n      ;\n\n      var _prepareUrlAs = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs.url;\n      as = _prepareUrlAs.as;\n      return this.change('pushState', url, as, options);\n    }\n    /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      ;\n\n      var _prepareUrlAs2 = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs2.url;\n      as = _prepareUrlAs2.as;\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(method, url, as, options, forcedScroll) {\n        var _options$scroll, localeChange, parsedAs, localePathResult, didNavigate, _this$locales, detectedDomain, asNoBasePath, _options$shallow, shallow, routeProps, cleanedAs, parsed, _parsed, pathname, query, pages, rewrites, _yield, route, resolvedAs, rewritesResult, _parsedAs, asPathname, routeRegex, routeMatch, shouldInterpolate, interpolatedAs, missingParams, _self$__NEXT_DATA__$p, _self$__NEXT_DATA__$p2, routeInfo, _routeInfo, error, props, __N_SSG, __N_SSP, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, appComp, isValidShallowRoute;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (isLocalURL(url)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                window.location.href = url;\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                // for static pages with query params in the URL we delay\n                // marking the router ready until after the query is updated\n                if (options._h) {\n                  this.isReady = true;\n                } // Default to scroll reset behavior unless explicitly specified to be\n                // `false`! This makes the behavior between using `Router#push` and a\n                // `<Link />` consistent.\n\n\n                options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);\n                localeChange = options.locale !== this.locale;\n\n                if (!process.env.__NEXT_I18N_SUPPORT) {\n                  _context.next = 18;\n                  break;\n                }\n\n                this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;\n\n                if (typeof options.locale === 'undefined') {\n                  options.locale = this.locale;\n                }\n\n                parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(hasBasePath(as) ? delBasePath(as) : as);\n                localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n\n                if (localePathResult.detectedLocale) {\n                  this.locale = localePathResult.detectedLocale;\n                  parsedAs.pathname = addBasePath(parsedAs.pathname);\n                  as = (0, _utils.formatWithValidation)(parsedAs);\n                  url = addBasePath((0, _normalizeLocalePath.normalizeLocalePath)(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);\n                }\n\n                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  // if the locale isn't configured hard navigate to show 404 page\n                  if (!((_this$locales = this.locales) != null && _this$locales.includes(this.locale))) {\n                    parsedAs.pathname = addLocale(parsedAs.pathname, this.locale);\n                    window.location.href = (0, _utils.formatWithValidation)(parsedAs); // this was previously a return but was removed in favor\n                    // of better dead code elimination with regenerator runtime\n\n                    didNavigate = true;\n                  }\n                }\n\n                detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  // if we are navigating to a domain locale ensure we redirect to the\n                  // correct domain\n                  if (!didNavigate && detectedDomain && this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {\n                    asNoBasePath = delBasePath(as);\n                    window.location.href = \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(addBasePath(\"\".concat(this.locale === detectedDomain.defaultLocale ? '' : \"/\".concat(this.locale)).concat(asNoBasePath === '/' ? '' : asNoBasePath) || '/')); // this was previously a return but was removed in favor\n                    // of better dead code elimination with regenerator runtime\n\n                    didNavigate = true;\n                  }\n                }\n\n                if (!didNavigate) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 18:\n                if (!options._h) {\n                  this.isSsr = false;\n                } // marking route changes as a navigation start entry\n\n\n                if (_utils.ST) {\n                  performance.mark('routeChange');\n                }\n\n                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;\n                routeProps = {\n                  shallow: shallow\n                };\n\n                if (this._inFlightRoute) {\n                  this.abortComponentLoad(this._inFlightRoute, routeProps);\n                }\n\n                as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n                cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n                this._inFlightRoute = as; // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n                // WARNING: `_h` is an internal option for handing Next.js client-side\n                // hydration. Your app should _never_ use this property. It may change at\n                // any time without notice.\n\n                if (!(!options._h && this.onlyAHashChange(cleanedAs))) {\n                  _context.next = 34;\n                  break;\n                }\n\n                this.asPath = cleanedAs;\n                Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n                this.changeState(method, url, as, options);\n                this.scrollToHash(cleanedAs);\n                this.notify(this.components[this.route], null);\n                Router.events.emit('hashChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 34:\n                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n                _parsed = parsed, pathname = _parsed.pathname, query = _parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages\n                // get their query parameters to allow ensuring they can be parsed properly\n                // when rewritten to\n\n                _context.prev = 36;\n                _context.next = 39;\n                return this.pageLoader.getPageList();\n\n              case 39:\n                pages = _context.sent;\n                _context.next = 42;\n                return (0, _routeLoader.getClientBuildManifest)();\n\n              case 42:\n                _yield = _context.sent;\n                rewrites = _yield.__rewrites;\n                _context.next = 50;\n                break;\n\n              case 46:\n                _context.prev = 46;\n                _context.t0 = _context[\"catch\"](36); // If we fail to resolve the page list or client-build manifest, we must\n                // do a server-side transition:\n\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 50:\n                parsed = resolveDynamicRoute(parsed, pages);\n\n                if (parsed.pathname !== pathname) {\n                  pathname = parsed.pathname;\n                  url = (0, _utils.formatWithValidation)(parsed);\n                } // url and as should always be prefixed with basePath by this\n                // point by either next/link or router.push/replace so strip the\n                // basePath from the pathname to match the pages dir 1-to-1\n\n\n                pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n                // We should compare the new asPath to the current asPath, not the url\n\n                if (!this.urlIsNew(cleanedAs) && !localeChange) {\n                  method = 'replaceState';\n                }\n\n                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // we need to resolve the as value using rewrites for dynamic SSG\n                // pages to allow building the data URL correctly\n\n                resolvedAs = as;\n\n                if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n                  rewritesResult = (0, _resolveRewrites[\"default\"])(addBasePath(addLocale(delBasePath(as), this.locale)), pages, rewrites, query, function (p) {\n                    return resolveDynamicRoute({\n                      pathname: p\n                    }, pages).pathname;\n                  }, this.locales);\n                  resolvedAs = rewritesResult.asPath;\n\n                  if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                    // if this directly matches a page we need to update the href to\n                    // allow the correct page chunk to be loaded\n                    route = rewritesResult.resolvedHref;\n                    pathname = rewritesResult.resolvedHref;\n                    parsed.pathname = pathname;\n                    url = (0, _utils.formatWithValidation)(parsed);\n                  }\n                }\n\n                if (isLocalURL(as)) {\n                  _context.next = 62;\n                  break;\n                }\n\n                if (!true) {\n                  _context.next = 60;\n                  break;\n                }\n\n                throw new Error(\"Invalid href: \\\"\".concat(url, \"\\\" and as: \\\"\").concat(as, \"\\\", received relative href and external as\") + \"\\nSee more info: https://err.sh/next.js/invalid-relative-url-external-as\");\n\n              case 60:\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 62:\n                resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n\n                if (!(0, _isDynamic.isDynamicRoute)(route)) {\n                  _context.next = 78;\n                  break;\n                }\n\n                _parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n                asPathname = _parsedAs.pathname;\n                routeRegex = (0, _routeRegex.getRouteRegex)(route);\n                routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n                shouldInterpolate = route === asPathname;\n                interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n\n                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {\n                  _context.next = 77;\n                  break;\n                }\n\n                missingParams = Object.keys(routeRegex.groups).filter(function (param) {\n                  return !query[param];\n                });\n\n                if (!(missingParams.length > 0)) {\n                  _context.next = 75;\n                  break;\n                }\n\n                if (true) {\n                  console.warn(\"\".concat(shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\", \" failed to manually provide \") + \"the params: \".concat(missingParams.join(', '), \" in the `href`'s `query`\"));\n                }\n\n                throw new Error((shouldInterpolate ? \"The provided `href` (\".concat(url, \") value is missing query values (\").concat(missingParams.join(', '), \") to be interpolated properly. \") : \"The provided `as` value (\".concat(asPathname, \") is incompatible with the `href` value (\").concat(route, \"). \")) + \"Read more: https://err.sh/vercel/next.js/\".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));\n\n              case 75:\n                _context.next = 78;\n                break;\n\n              case 77:\n                if (shouldInterpolate) {\n                  as = (0, _utils.formatWithValidation)(Object.assign({}, _parsedAs, {\n                    pathname: interpolatedAs.result,\n                    query: omitParmsFromQuery(query, interpolatedAs.params)\n                  }));\n                } else {\n                  // Merge params into `query`, overwriting any specified in search\n                  Object.assign(query, routeMatch);\n                }\n\n              case 78:\n                Router.events.emit('routeChangeStart', as, routeProps);\n                _context.prev = 79;\n                _context.next = 82;\n                return this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);\n\n              case 82:\n                routeInfo = _context.sent;\n                _routeInfo = routeInfo, error = _routeInfo.error, props = _routeInfo.props, __N_SSG = _routeInfo.__N_SSG, __N_SSP = _routeInfo.__N_SSP; // handle redirect on client-transition\n\n                if (!((__N_SSG || __N_SSP) && props)) {\n                  _context.next = 109;\n                  break;\n                }\n\n                if (!(props.pageProps && props.pageProps.__N_REDIRECT)) {\n                  _context.next = 95;\n                  break;\n                }\n\n                destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n                // client-navigation if it is falling back to hard navigation if\n                // it's not\n\n                if (!destination.startsWith('/')) {\n                  _context.next = 93;\n                  break;\n                }\n\n                parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);\n                resolveDynamicRoute(parsedHref, pages, false);\n\n                if (!pages.includes(parsedHref.pathname)) {\n                  _context.next = 93;\n                  break;\n                }\n\n                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;\n                return _context.abrupt(\"return\", this.change(method, newUrl, newAs, options));\n\n              case 93:\n                window.location.href = destination;\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 95:\n                this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n                if (!(props.notFound === SSG_DATA_NOT_FOUND)) {\n                  _context.next = 109;\n                  break;\n                }\n\n                _context.prev = 97;\n                _context.next = 100;\n                return this.fetchComponent('/404');\n\n              case 100:\n                notFoundRoute = '/404';\n                _context.next = 106;\n                break;\n\n              case 103:\n                _context.prev = 103;\n                _context.t1 = _context[\"catch\"](97);\n                notFoundRoute = '/_error';\n\n              case 106:\n                _context.next = 108;\n                return this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {\n                  shallow: false\n                });\n\n              case 108:\n                routeInfo = _context.sent;\n\n              case 109:\n                Router.events.emit('beforeHistoryChange', as, routeProps);\n                this.changeState(method, url, as, options);\n\n                if (true) {\n                  appComp = this.components['/_app'].Component;\n                  window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n                } // shallow routing is only allowed for same page URL changes.\n\n\n                isValidShallowRoute = options.shallow && this.route === route;\n\n                if (options._h && pathname === '/_error' && ((_self$__NEXT_DATA__$p = self.__NEXT_DATA__.props) == null ? void 0 : (_self$__NEXT_DATA__$p2 = _self$__NEXT_DATA__$p.pageProps) == null ? void 0 : _self$__NEXT_DATA__$p2.statusCode) === 500 && props != null && props.pageProps) {\n                  // ensure statusCode is still correct for static 500 page\n                  // when updating query information\n                  props.pageProps.statusCode = 500;\n                }\n\n                _context.next = 116;\n                return this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (isValidShallowRoute || !options.scroll ? null : {\n                  x: 0,\n                  y: 0\n                }))[\"catch\"](function (e) {\n                  if (e.cancelled) error = error || e;else throw e;\n                });\n\n              case 116:\n                if (!error) {\n                  _context.next = 119;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n                throw error;\n\n              case 119:\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  if (this.locale) {\n                    document.documentElement.lang = this.locale;\n                  }\n                }\n\n                Router.events.emit('routeChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 124:\n                _context.prev = 124;\n                _context.t2 = _context[\"catch\"](79);\n\n                if (!_context.t2.cancelled) {\n                  _context.next = 128;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 128:\n                throw _context.t2;\n\n              case 129:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[36, 46], [79, 124], [97, 103]]);\n      }));\n\n      function change(_x, _x2, _x3, _x4, _x5) {\n        return _change.apply(this, arguments);\n      }\n\n      return change;\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (true) {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n        this._shallow = options.shallow;\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options,\n          __N: true,\n          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n        }, // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '', as);\n      }\n    }\n  }, {\n    key: \"handleRouteInfoError\",\n    value: function () {\n      var _handleRouteInfoError = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(err, pathname, query, as, routeProps, loadErrorFail) {\n        var Component, styleSheets, props, _yield$this$fetchComp, routeInfo;\n\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!err.cancelled) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw err;\n\n              case 2:\n                if (!((0, _routeLoader.isAssetError)(err) || loadErrorFail)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n\n                window.location.href = as; // Changing the URL doesn't block executing the current code path.\n                // So let's throw a cancellation error stop the routing logic.\n\n                throw buildCancellationError();\n\n              case 6:\n                _context2.prev = 6;\n\n                if (!(typeof Component === 'undefined' || typeof styleSheets === 'undefined')) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                ;\n                _context2.next = 11;\n                return this.fetchComponent('/_error');\n\n              case 11:\n                _yield$this$fetchComp = _context2.sent;\n                Component = _yield$this$fetchComp.page;\n                styleSheets = _yield$this$fetchComp.styleSheets;\n\n              case 14:\n                routeInfo = {\n                  props: props,\n                  Component: Component,\n                  styleSheets: styleSheets,\n                  err: err,\n                  error: err\n                };\n\n                if (routeInfo.props) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                _context2.prev = 16;\n                _context2.next = 19;\n                return this.getInitialProps(Component, {\n                  err: err,\n                  pathname: pathname,\n                  query: query\n                });\n\n              case 19:\n                routeInfo.props = _context2.sent;\n                _context2.next = 26;\n                break;\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t0 = _context2[\"catch\"](16);\n                console.error('Error in error page `getInitialProps`: ', _context2.t0);\n                routeInfo.props = {};\n\n              case 26:\n                return _context2.abrupt(\"return\", routeInfo);\n\n              case 29:\n                _context2.prev = 29;\n                _context2.t1 = _context2[\"catch\"](6);\n                return _context2.abrupt(\"return\", this.handleRouteInfoError(_context2.t1, pathname, query, as, routeProps, true));\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 29], [16, 22]]);\n      }));\n\n      function handleRouteInfoError(_x6, _x7, _x8, _x9, _x10, _x11) {\n        return _handleRouteInfoError.apply(this, arguments);\n      }\n\n      return handleRouteInfoError;\n    }()\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(route, pathname, query, as, resolvedAs, routeProps) {\n        var _this2 = this;\n\n        var existingRouteInfo, cachedRouteInfo, routeInfo, Component, __N_SSG, __N_SSP, _require, isValidElementType, dataHref, props;\n\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                existingRouteInfo = this.components[route];\n\n                if (!(routeProps.shallow && existingRouteInfo && this.route === route)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", existingRouteInfo);\n\n              case 4:\n                cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n\n                if (!cachedRouteInfo) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.t0 = cachedRouteInfo;\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.next = 11;\n                return this.fetchComponent(route).then(function (res) {\n                  return {\n                    Component: res.page,\n                    styleSheets: res.styleSheets,\n                    __N_SSG: res.mod.__N_SSG,\n                    __N_SSP: res.mod.__N_SSP\n                  };\n                });\n\n              case 11:\n                _context3.t0 = _context3.sent;\n\n              case 12:\n                routeInfo = _context3.t0;\n                Component = routeInfo.Component, __N_SSG = routeInfo.__N_SSG, __N_SSP = routeInfo.__N_SSP;\n\n                if (!true) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _require = require('react-is'), isValidElementType = _require.isValidElementType;\n\n                if (isValidElementType(Component)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n\n              case 18:\n                if (__N_SSG || __N_SSP) {\n                  dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n                    pathname: pathname,\n                    query: query\n                  }), resolvedAs, __N_SSG, this.locale);\n                }\n\n                _context3.next = 21;\n                return this._getData(function () {\n                  return __N_SSG ? _this2._getStaticData(dataHref) : __N_SSP ? _this2._getServerData(dataHref) : _this2.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n                  {\n                    pathname: pathname,\n                    query: query,\n                    asPath: as\n                  });\n                });\n\n              case 21:\n                props = _context3.sent;\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return _context3.abrupt(\"return\", routeInfo);\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t1 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", this.handleRouteInfoError(_context3.t1, pathname, query, as, routeProps));\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 27]]);\n      }));\n\n      function getRouteInfo(_x12, _x13, _x14, _x15, _x16, _x17) {\n        return _getRouteInfo.apply(this, arguments);\n      }\n\n      return getRouteInfo;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data, resetScroll) {\n      this.isFallback = false;\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      return this.notify(data, resetScroll);\n    }\n    /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = (0, _slicedToArray2[\"default\"])(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = (0, _slicedToArray2[\"default\"])(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = (0, _slicedToArray2[\"default\"])(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value or `#top`\n      // To mirror browsers\n\n\n      if (hash === '' || hash === 'top') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(url) {\n        var _this3 = this;\n\n        var asPath,\n            options,\n            parsed,\n            _parsed2,\n            pathname,\n            parsedAs,\n            localePathResult,\n            pages,\n            route,\n            resolvedAs,\n            rewrites,\n            _yield2,\n            rewritesResult,\n            _args4 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                asPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : url;\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n                _parsed2 = parsed, pathname = _parsed2.pathname;\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  if (options.locale === false) {\n                    pathname = (0, _normalizeLocalePath.normalizeLocalePath)(pathname, this.locales).pathname;\n                    parsed.pathname = pathname;\n                    url = (0, _utils.formatWithValidation)(parsed);\n                    parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n                    localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n                    parsedAs.pathname = localePathResult.pathname;\n                    options.locale = localePathResult.detectedLocale || this.defaultLocale;\n                    asPath = (0, _utils.formatWithValidation)(parsedAs);\n                  }\n                }\n\n                _context4.next = 7;\n                return this.pageLoader.getPageList();\n\n              case 7:\n                pages = _context4.sent;\n                parsed = resolveDynamicRoute(parsed, pages, false);\n\n                if (parsed.pathname !== pathname) {\n                  pathname = parsed.pathname;\n                  url = (0, _utils.formatWithValidation)(parsed);\n                }\n\n                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n                resolvedAs = asPath;\n\n                if (!(process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/'))) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                _context4.next = 15;\n                return (0, _routeLoader.getClientBuildManifest)();\n\n              case 15:\n                _yield2 = _context4.sent;\n                rewrites = _yield2.__rewrites;\n                rewritesResult = (0, _resolveRewrites[\"default\"])(addBasePath(addLocale(delBasePath(asPath), this.locale)), pages, rewrites, parsed.query, function (p) {\n                  return resolveDynamicRoute({\n                    pathname: p\n                  }, pages).pathname;\n                }, this.locales);\n\n                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                  // if this directly matches a page we need to update the href to\n                  // allow the correct page chunk to be loaded\n                  route = rewritesResult.resolvedHref;\n                  pathname = rewritesResult.resolvedHref;\n                  parsed.pathname = pathname;\n                  url = (0, _utils.formatWithValidation)(parsed);\n                  resolvedAs = rewritesResult.asPath;\n                }\n\n              case 19:\n                if (!true) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 21:\n                _context4.next = 23;\n                return Promise.all([this.pageLoader._isSsg(url).then(function (isSsg) {\n                  return isSsg ? _this3._getStaticData(_this3.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this3.locale)) : false;\n                }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function prefetch(_x18) {\n        return _prefetch.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(route) {\n        var cancelled, cancel, componentResult, error;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.clc = function () {\n                  cancelled = true;\n                };\n\n                _context5.next = 4;\n                return this.pageLoader.loadPage(route);\n\n              case 4:\n                componentResult = _context5.sent;\n\n                if (!cancelled) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n                error.cancelled = true;\n                throw error;\n\n              case 9:\n                if (cancel === this.clc) {\n                  this.clc = null;\n                }\n\n                return _context5.abrupt(\"return\", componentResult);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function fetchComponent(_x19) {\n        return _fetchComponent.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: \"_getData\",\n    value: function _getData(fn) {\n      var _this4 = this;\n\n      var cancelled = false;\n\n      var cancel = function cancel() {\n        cancelled = true;\n      };\n\n      this.clc = cancel;\n      return fn().then(function (data) {\n        if (cancel === _this4.clc) {\n          _this4.clc = null;\n        }\n\n        if (cancelled) {\n          var err = new Error('Loading initial props cancelled');\n          err.cancelled = true;\n          throw err;\n        }\n\n        return data;\n      });\n    }\n  }, {\n    key: \"_getStaticData\",\n    value: function _getStaticData(dataHref) {\n      var _this5 = this;\n\n      var _URL = new URL(dataHref, window.location.href),\n          cacheKey = _URL.href;\n\n      if (false && !this.isPreview && this.sdc[cacheKey]) {\n        return Promise.resolve(this.sdc[cacheKey]);\n      }\n\n      return fetchNextData(dataHref, this.isSsr).then(function (data) {\n        _this5.sdc[cacheKey] = data;\n        return data;\n      });\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function _getServerData(dataHref) {\n      var _this6 = this;\n\n      var _URL2 = new URL(dataHref, window.location.href),\n          resourceKey = _URL2.href;\n\n      if (this.sdr[resourceKey]) {\n        return this.sdr[resourceKey];\n      }\n\n      return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(function (data) {\n        delete _this6.sdr[resourceKey];\n        return data;\n      })[\"catch\"](function (err) {\n        delete _this6.sdr[resourceKey];\n        throw err;\n      });\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var App = this.components['/_app'].Component;\n\n      var AppTree = this._wrapApp(App);\n\n      ctx.AppTree = AppTree;\n      return (0, _utils.loadGetInitialProps)(App, {\n        AppTree: AppTree,\n        Component: Component,\n        router: this,\n        ctx: ctx\n      });\n    }\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as, routeProps) {\n      if (this.clc) {\n        Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n        this.clc();\n        this.clc = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data, resetScroll) {\n      return this.sub(data, this.components['/_app'].Component, resetScroll);\n    }\n  }]);\n  return Router;\n}();\n\nexports[\"default\"] = Router;\nRouter.events = (0, _mitt[\"default\"])();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["process","detectDomainLocale","require","basePath","Object","cancelled","prefix","path","pathNoQueryHash","locale","detectedDomain","addPathPrefix","queryIndex","hashIndex","url","locationOrigin","resolved","hasBasePath","interpolatedRoute","dynamicRegex","dynamicGroups","dynamicMatches","asPathname","params","param","value","replaced","repeat","Array","optional","segment","encodeURIComponent","result","filteredQuery","key","query","base","urlAsString","isLocalURL","resolveAs","finalUrl","interpolatedAs","interpolateAs","pathname","hash","omitParmsFromQuery","resolvedHref","origin","resolveHref","router","hrefHadOrigin","asHadOrigin","resolvedAs","stripOrigin","preparedUrl","addBasePath","preparedAs","as","applyBasePath","cleanPathname","delBasePath","pages","page","parsedHref","manualScrollRestoration","window","v","sessionStorage","SSG_DATA_NOT_FOUND","Symbol","credentials","res","attempts","fetchRetry","data","notFound","isServerRender","err","Router","route","asPath","components","sdc","sdr","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","_shallow","locales","defaultLocale","domainLocales","isReady","isPreview","isLocaleDomain","_idx","constructor","Component","initial","props","__N_SSG","initialProps","__N_SSP","styleSheets","autoExportDynamic","self","e","state","JSON","x","y","forcedScroll","shallow","options","reload","back","push","prepareUrlAs","replace","localeChange","parsedAs","localePathResult","didNavigate","addLocale","asNoBasePath","ST","performance","routeProps","cleanedAs","delLocale","parsed","resolveDynamicRoute","method","rewritesResult","p","routeRegex","routeMatch","shouldInterpolate","missingParams","console","routeInfo","destination","notFoundRoute","appComp","isValidShallowRoute","error","document","changeState","__N","idx","buildCancellationError","existingRouteInfo","cachedRouteInfo","isValidElementType","dataHref","set","beforePopState","onlyAHashChange","newHash","oldUrlNoHash","oldHash","scrollToHash","idEl","nameEl","urlIsNew","Promise","isSsg","cancel","componentResult","_getData","fn","_getStaticData","fetchNextData","_getServerData","getInitialProps","AppTree","ctx","abortComponentLoad","notify"],"mappings":"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","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport {\n  getClientBuildManifest,\n  isAssetError,\n  markAssetError,\n} from '../../../client/route-loader'\nimport { DomainLocales } from '../../server/config'\nimport { denormalizePagePath } from '../../server/denormalize-page-path'\nimport { normalizeLocalePath } from '../i18n/normalize-locale-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n  NEXT_DATA,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ndeclare global {\n  interface Window {\n    /* prod */\n    __NEXT_DATA__: NEXT_DATA\n  }\n}\n\ninterface RouteProperties {\n  shallow: boolean\n}\n\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n  scroll?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState =\n  | null\n  | { __N: false }\n  | ({ __N: true; idx: number } & NextHistoryState)\n\nlet detectDomainLocale: typeof import('../i18n/detect-domain-locale').detectDomainLocale\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale')\n    .detectDomainLocale\n}\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nfunction addPathPrefix(path: string, prefix?: string) {\n  return prefix && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(prefix)\n      : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}`\n    : path\n}\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: string[],\n  domainLocales?: DomainLocales\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || normalizeLocalePath(path, locales).detectedLocale\n\n    const detectedDomain = detectDomainLocale(domainLocales, undefined, locale)\n\n    if (detectedDomain) {\n      return `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${\n        basePath || ''\n      }${locale === detectedDomain.defaultLocale ? '' : `/${locale}`}${path}`\n    }\n    return false\n  }\n\n  return false\n}\n\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale &&\n      locale !== defaultLocale &&\n      !path.startsWith('/' + locale + '/') &&\n      path !== '/' + locale\n      ? addPathPrefix(path, '/' + locale)\n      : path\n  }\n  return path\n}\n\nexport function delLocale(path: string, locale?: string) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale &&\n      (path.startsWith('/' + locale + '/') || path === '/' + locale)\n      ? path.substr(locale.length + 1) || '/'\n      : path\n  }\n  return path\n}\n\nfunction pathNoQueryHash(path: string) {\n  const queryIndex = path.indexOf('?')\n  const hashIndex = path.indexOf('#')\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex)\n  }\n  return path\n}\n\nexport function hasBasePath(path: string): boolean {\n  path = pathNoQueryHash(path)\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath)\n}\n\nexport function delBasePath(path: string): string {\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[])\n                  .map(\n                    // these values should be fully encoded instead of just\n                    // path delimiter escaped since they are being inserted\n                    // into the URL and we expect URL encoded segments\n                    // when parsing dynamic route params\n                    (segment) => encodeURIComponent(segment)\n                  )\n                  .join('/')\n              : encodeURIComponent(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n\nfunction omitParmsFromQuery(query: ParsedUrlQuery, params: string[]) {\n  const filteredQuery: ParsedUrlQuery = {}\n\n  Object.keys(query).forEach((key) => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key]\n    }\n  })\n  return filteredQuery\n}\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  currentPath: string,\n  href: Url,\n  resolveAs?: boolean\n): string {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n')\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  // Return because it cannot be routed by the Next.js router\n  if (!isLocalURL(urlAsString)) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return (resolveAs\n      ? [resolvedHref, interpolatedAs || resolvedHref]\n      : resolvedHref) as string\n  } catch (_) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n}\n\nfunction stripOrigin(url: string) {\n  const origin = getLocationOrigin()\n\n  return url.startsWith(origin) ? url.substring(origin.length) : url\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as?: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router.pathname, url, true)\n  const origin = getLocationOrigin()\n  const hrefHadOrigin = resolvedHref.startsWith(origin)\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin)\n\n  resolvedHref = stripOrigin(resolvedHref)\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs\n\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref)\n  const preparedAs = as\n    ? stripOrigin(resolveHref(router.pathname, as))\n    : resolvedAs || resolvedHref\n\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs),\n  }\n}\n\nfunction resolveDynamicRoute(\n  parsedHref: UrlObject,\n  pages: string[],\n  applyBasePath = true\n) {\n  const { pathname } = parsedHref\n  const cleanPathname = removePathTrailingSlash(\n    denormalizePagePath(applyBasePath ? delBasePath(pathname!) : pathname!)\n  )\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return parsedHref\n  }\n\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname!)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some((page) => {\n      if (isDynamicRoute(page) && getRouteRegex(page).re.test(cleanPathname!)) {\n        parsedHref.pathname = applyBasePath ? addBasePath(page) : page\n        return true\n      }\n    })\n  }\n  parsedHref.pathname = removePathTrailingSlash(parsedHref.pathname!)\n  return parsedHref\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocales\n  isLocaleDomain: boolean\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n    | 'isReady'\n    | 'isPreview'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n  locale?: string | false\n}\n\nexport type PrivateRouteInfo =\n  | (Omit<CompletePrivateRouteInfo, 'styleSheets'> & { initial: true })\n  | CompletePrivateRouteInfo\n\nexport type CompletePrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<CompletePrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (\n  data: PrivateRouteInfo,\n  App: AppComponent,\n  resetScroll: { x: number; y: number } | null\n) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history &&\n  !!(function () {\n    try {\n      let v = '__next'\n      // eslint-disable-next-line no-sequences\n      return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true\n    } catch (n) {}\n  })()\n\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND')\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      if (res.status === 404) {\n        return res.json().then((data) => {\n          if (data.notFound) {\n            return { notFound: SSG_DATA_NOT_FOUND }\n          }\n          throw new Error(`Failed to load static props`)\n        })\n      }\n      throw new Error(`Failed to load static props`)\n    }\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n\n    if (!isServerRender) {\n      markAssetError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  // In-flight Server Data Requests, for deduping\n  sdr: { [asPath: string]: Promise<object> } = {}\n\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocales\n  isReady: boolean\n  isPreview: boolean\n  isLocaleDomain: boolean\n\n  private _idx: number = 0\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: AppComponent\n      wrapApp: (App: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n      locale?: string\n      locales?: string[]\n      defaultLocale?: string\n      domainLocales?: DomainLocales\n      isPreview?: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    const autoExportDynamic =\n      isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport\n\n    this.asPath = autoExportDynamic ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    this.isReady = !!(\n      self.__NEXT_DATA__.gssp ||\n      self.__NEXT_DATA__.gip ||\n      (!autoExportDynamic && !self.location.search)\n    )\n    this.isPreview = !!isPreview\n    this.isLocaleDomain = false\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale\n      this.locales = locales\n      this.defaultLocale = defaultLocale\n      this.domainLocales = domainLocales\n      this.isLocaleDomain = !!detectDomainLocale(\n        domainLocales,\n        self.location.hostname\n      )\n    }\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL(),\n          { locale }\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    let forcedScroll: { x: number; y: number } | undefined\n    const { url, as, options, idx } = state\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      if (manualScrollRestoration) {\n        if (this._idx !== idx) {\n          // Snapshot current scroll position:\n          try {\n            sessionStorage.setItem(\n              '__next_scroll_' + this._idx,\n              JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n            )\n          } catch {}\n\n          // Restore old scroll position:\n          try {\n            const v = sessionStorage.getItem('__next_scroll_' + idx)\n            forcedScroll = JSON.parse(v!)\n          } catch {\n            forcedScroll = { x: 0, y: 0 }\n          }\n        }\n      }\n    }\n    this._idx = idx\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign<{}, TransitionOptions, TransitionOptions>({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n      }),\n      forcedScroll\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as?: Url, options: TransitionOptions = {}) {\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem(\n            '__next_scroll_' + this._idx,\n            JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n          )\n        } catch {}\n      }\n    }\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as?: Url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  private async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions,\n    forcedScroll?: { x: number; y: number }\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n\n    // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    if ((options as any)._h) {\n      this.isReady = true\n    }\n\n    // Default to scroll reset behavior unless explicitly specified to be\n    // `false`! This makes the behavior between using `Router#push` and a\n    // `<Link />` consistent.\n    options.scroll = !!(options.scroll ?? true)\n\n    let localeChange = options.locale !== this.locale\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale =\n        options.locale === false\n          ? this.defaultLocale\n          : options.locale || this.locale\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale\n      }\n\n      const parsedAs = parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as)\n      const localePathResult = normalizeLocalePath(\n        parsedAs.pathname,\n        this.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale\n        parsedAs.pathname = addBasePath(parsedAs.pathname)\n        as = formatWithValidation(parsedAs)\n        url = addBasePath(\n          normalizeLocalePath(\n            hasBasePath(url) ? delBasePath(url) : url,\n            this.locales\n          ).pathname\n        )\n      }\n      let didNavigate = false\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if the locale isn't configured hard navigate to show 404 page\n        if (!this.locales?.includes(this.locale!)) {\n          parsedAs.pathname = addLocale(parsedAs.pathname, this.locale)\n          window.location.href = formatWithValidation(parsedAs)\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      const detectedDomain = detectDomainLocale(\n        this.domainLocales,\n        undefined,\n        this.locale\n      )\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (\n          !didNavigate &&\n          detectedDomain &&\n          this.isLocaleDomain &&\n          self.location.hostname !== detectedDomain.domain\n        ) {\n          const asNoBasePath = delBasePath(as)\n          window.location.href = `http${detectedDomain.http ? '' : 's'}://${\n            detectedDomain.domain\n          }${addBasePath(\n            `${\n              this.locale === detectedDomain.defaultLocale\n                ? ''\n                : `/${this.locale}`\n            }${asNoBasePath === '/' ? '' : asNoBasePath}` || '/'\n          )}`\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      if (didNavigate) {\n        return new Promise(() => {})\n      }\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    const { shallow = false } = options\n    const routeProps = { shallow }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps)\n    }\n\n    as = addBasePath(\n      addLocale(\n        hasBasePath(as) ? delBasePath(as) : as,\n        options.locale,\n        this.defaultLocale\n      )\n    )\n    const cleanedAs = delLocale(\n      hasBasePath(as) ? delBasePath(as) : as,\n      this.locale\n    )\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as, routeProps)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route], null)\n      Router.events.emit('hashChangeComplete', as, routeProps)\n      return true\n    }\n\n    let parsed = parseRelativeUrl(url)\n    let { pathname, query } = parsed\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    let pages: any, rewrites: any\n    try {\n      pages = await this.pageLoader.getPageList()\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as\n      return false\n    }\n\n    parsed = resolveDynamicRoute(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState'\n    }\n\n    let route = removePathTrailingSlash(pathname)\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n      const rewritesResult = resolveRewrites(\n        addBasePath(addLocale(delBasePath(as), this.locale)),\n        pages,\n        rewrites,\n        query,\n        (p: string) => resolveDynamicRoute({ pathname: p }, pages).pathname!,\n        this.locales\n      )\n      resolvedAs = rewritesResult.asPath\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        route = rewritesResult.resolvedHref\n        pathname = rewritesResult.resolvedHref\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    }\n\n    if (!isLocalURL(as)) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` +\n            `\\nSee more info: https://err.sh/next.js/invalid-relative-url-external-as`\n        )\n      }\n\n      window.location.href = as\n      return false\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale)\n\n    if (isDynamicRoute(route)) {\n      const parsedAs = parseRelativeUrl(resolvedAs)\n      const asPathname = parsedAs.pathname\n\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      const shouldInterpolate = route === asPathname\n      const interpolatedAs = shouldInterpolate\n        ? interpolateAs(route, asPathname, query)\n        : ({} as { result: undefined; params: undefined })\n\n      if (!routeMatch || (shouldInterpolate && !interpolatedAs.result)) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `${\n                shouldInterpolate\n                  ? `Interpolating href`\n                  : `Mismatching \\`as\\` and \\`href\\``\n              } failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            (shouldInterpolate\n              ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\n                  ', '\n                )}) to be interpolated properly. `\n              : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) +\n              `Read more: https://err.sh/vercel/next.js/${\n                shouldInterpolate\n                  ? 'href-interpolation-failed'\n                  : 'incompatible-href-as'\n              }`\n          )\n        }\n      } else if (shouldInterpolate) {\n        as = formatWithValidation(\n          Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params!),\n          })\n        )\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps)\n\n    try {\n      let routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps\n      )\n      let { error, props, __N_SSG, __N_SSP } = routeInfo\n\n      // handle redirect on client-transition\n      if ((__N_SSG || __N_SSP) && props) {\n        if ((props as any).pageProps && (props as any).pageProps.__N_REDIRECT) {\n          const destination = (props as any).pageProps.__N_REDIRECT\n\n          // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n          if (destination.startsWith('/')) {\n            const parsedHref = parseRelativeUrl(destination)\n            resolveDynamicRoute(parsedHref, pages, false)\n\n            if (pages.includes(parsedHref.pathname)) {\n              const { url: newUrl, as: newAs } = prepareUrlAs(\n                this,\n                destination,\n                destination\n              )\n              return this.change(method, newUrl, newAs, options)\n            }\n          }\n\n          window.location.href = destination\n          return new Promise(() => {})\n        }\n\n        this.isPreview = !!props.__N_PREVIEW\n\n        // handle SSG data 404\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute\n\n          try {\n            await this.fetchComponent('/404')\n            notFoundRoute = '/404'\n          } catch (_) {\n            notFoundRoute = '/_error'\n          }\n\n          routeInfo = await this.getRouteInfo(\n            notFoundRoute,\n            notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            { shallow: false }\n          )\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      // shallow routing is only allowed for same page URL changes.\n      const isValidShallowRoute = options.shallow && this.route === route\n\n      if (\n        (options as any)._h &&\n        pathname === '/_error' &&\n        self.__NEXT_DATA__.props?.pageProps?.statusCode === 500 &&\n        props?.pageProps\n      ) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500\n      }\n\n      await this.set(\n        route,\n        pathname!,\n        query,\n        cleanedAs,\n        routeInfo,\n        forcedScroll ||\n          (isValidShallowRoute || !options.scroll ? null : { x: 0, y: 0 })\n      ).catch((e) => {\n        if (e.cancelled) error = error || e\n        else throw e\n      })\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps)\n        throw error\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale\n        }\n      }\n      Router.events.emit('routeChangeComplete', as, routeProps)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    routeProps: RouteProperties,\n    loadErrorFail?: boolean\n  ): Promise<CompletePrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      let Component: ComponentType\n      let styleSheets: StyleSheetTuple[]\n      let props: Record<string, any> | undefined\n\n      if (\n        typeof Component! === 'undefined' ||\n        typeof styleSheets! === 'undefined'\n      ) {\n        ;({ page: Component, styleSheets } = await this.fetchComponent(\n          '/_error'\n        ))\n      }\n\n      const routeInfo: CompletePrivateRouteInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query,\n          } as any)\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr)\n          routeInfo.props = {}\n        }\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(\n        routeInfoErr,\n        pathname,\n        query,\n        as,\n        routeProps,\n        true\n      )\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    resolvedAs: string,\n    routeProps: RouteProperties\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const existingRouteInfo: PrivateRouteInfo | undefined = this.components[\n        route\n      ]\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo\n      }\n\n      const cachedRouteInfo: CompletePrivateRouteInfo | undefined =\n        existingRouteInfo && 'initial' in existingRouteInfo\n          ? undefined\n          : existingRouteInfo\n      const routeInfo: CompletePrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          resolvedAs,\n          __N_SSG,\n          this.locale\n        )\n      }\n\n      const props = await this._getData<CompletePrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n              } as any\n            )\n      )\n\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as, routeProps)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data, resetScroll)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname = normalizeLocalePath!(pathname, this.locales).pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n\n        let parsedAs = parseRelativeUrl(asPath)\n        const localePathResult = normalizeLocalePath!(\n          parsedAs.pathname,\n          this.locales\n        )\n        parsedAs.pathname = localePathResult.pathname\n        options.locale = localePathResult.detectedLocale || this.defaultLocale\n        asPath = formatWithValidation(parsedAs)\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList()\n\n    parsed = resolveDynamicRoute(parsed, pages, false) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n    let route = removePathTrailingSlash(pathname)\n    let resolvedAs = asPath\n\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n      let rewrites: any[]\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n\n      const rewritesResult = resolveRewrites(\n        addBasePath(addLocale(delBasePath(asPath), this.locale)),\n        pages,\n        rewrites,\n        parsed.query,\n        (p: string) => resolveDynamicRoute({ pathname: p }, pages).pathname!,\n        this.locales\n      )\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        route = rewritesResult.resolvedHref\n        pathname = rewritesResult.resolvedHref\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n        resolvedAs = rewritesResult.asPath\n      }\n    }\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    await Promise.all([\n      this.pageLoader._isSsg(url).then((isSsg: boolean) => {\n        return isSsg\n          ? this._getStaticData(\n              this.pageLoader.getDataHref(\n                url,\n                resolvedAs,\n                true,\n                typeof options.locale !== 'undefined'\n                  ? options.locale\n                  : this.locale\n              )\n            )\n          : false\n      }),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (\n      process.env.NODE_ENV === 'production' &&\n      !this.isPreview &&\n      this.sdc[cacheKey]\n    ) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    const { href: resourceKey } = new URL(dataHref, window.location.href)\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey]\n    }\n    return (this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr)\n      .then((data) => {\n        delete this.sdr[resourceKey]\n        return data\n      })\n      .catch((err) => {\n        delete this.sdr[resourceKey]\n        throw err\n      }))\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string, routeProps: RouteProperties): void {\n    if (this.clc) {\n      Router.events.emit(\n        'routeChangeError',\n        buildCancellationError(),\n        as,\n        routeProps\n      )\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    return this.sub(\n      data,\n      this.components['/_app'].Component as AppComponent,\n      resetScroll\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}