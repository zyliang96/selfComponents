/*! For license information please see router.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.zyliangRouter=t(require("react")):e.zyliangRouter=t(e.React)}(self,(function(e){return(()=>{var t={353:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BrowserRouter:()=>D,HashRouter:()=>I,Link:()=>F,Redirect:()=>T,Route:()=>w,Router:()=>f,Switch:()=>R});var r=n(698),o=n.n(r);const a=function(e,t){var n=o().createContext(t);return n.displayName=e,n};const i=a("Router");const c=a("Router-History");function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const f=function(e){var t,n=e.children,a=e.history,l=e.staticContext,f=void 0!==l&&l,s=u((0,r.useState)(a.location),2),p=s[0],h=s[1];return(0,r.useEffect)((function(){h(a.location);var e=null;return f||(e=a.listen((function(e){e.action;var t=e.location;h(t)}))),function(){e&&e()}}),[a]),o().createElement(i.Provider,{value:{history:a,location:p,match:(t=p.pathname,{path:"/",url:"/",params:{},isExact:"/"===t}),staticContext:f}},o().createElement(c.Provider,{children:n,value:a}))};var s=n(433);function p(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y={},d=[],v=0;function b(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(y[e])return y[e];var n=[],r=(0,s.B)(e,n,t),o={regexp:r,keys:n};if(v<1e4)y[e]=o,d.push(e),v++;else{var a=d.shift();delete y[a],y[e]=o,d.push(e)}return o}function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,c=void 0!==i&&i,u=n.sensitive,l=void 0!==u&&u,f=[].concat(r);return f.reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=b(n,{end:a,strict:c,sensitive:l}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var f=p(u),s=f[0],h=f.slice(1),y=e===s;return a&&!y?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:y,params:i.reduce((function(e,t,n){return e[t.name]=h[n],e}),{})}}),null)}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){j(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const w=function(e){var t=e.path,n=e.component,r=e.children,a=e.render,c=e.computedMatch;return o().createElement(i.Consumer,null,(function(u){console.log("Route");u.history;var l=u.location,f=u.match,s=e.location||l,p=c||(t?m(s.pathname,e):f),h=O(O({},u),{},{nowLocation:s,nowMatch:p});return Array.isArray(r)&&function(e){return 0===o().Children.count(e)}(r)&&(function(e){throw new TypeError('"'+e+'" is read-only')}("children"),r=null),o().createElement(i.Provider,{value:h},p?r?"function"==typeof r?r(h):r:n?o().createElement(n,h):a?a(h):null:"function"==typeof r?r(h):r)}))};var E=n(391);function x(e){var t=e.onMount,n=e.onUpdate,o=e.to;return(0,r.useEffect)((function(){t&&t()}),[]),(0,r.useEffect)((function(){console.log(2222222222),n(e)}),[o]),null}function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function P(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const T=function(e){e.computedMatch;var t=e.to,n=e.push,r=void 0!==n&&n,a=e.from;return o().createElement(i.Consumer,null,(function(n){console.log("Redirect");var i=n.history,c=n.staticContext,u=n.location,l=r?i.push:i.replace,f=e.location||u,s=a?m(f.pathname,P({path:a},e)):null,p=(0,E.createLocation)({path:t}),h=function(){if(a)return s&&l(p),null;l(p)};return c?(h(),null):o().createElement(x,{onMount:function(){h()},onUpdate:function(e){var t=(0,E.createLocation)({path:e});(0,E.locationsAreEqual)(t,P(P({},p),{},{key:t.key}))||h()},to:t})}))};function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const R=function(e){return o().createElement(i.Consumer,null,(function(t){var n,r,a=e.location||t.location;return o().Children.forEach(e.children,(function(e){if(null==r&&o().isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?m(a.pathname,C(C({},e.props),{},{path:i})):t.match}})),r?o().cloneElement(n,{location:a,computedMatch:r}):null}))};function H(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return B(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const D=function(e){var t=e.children,n=H((0,r.useState)((function(){return(0,E.createBrowserHistory)()})),1)[0];return o().createElement(f,{history:n,children:t})};function U(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return M(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const I=function(e){var t=e.children,n=U((0,r.useState)((function(){return(0,E.createHashHistory)()})),1)[0];return o().createElement(f,{history:n,children:t})};function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function V(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function N(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var $=function(e){return e},K=o().forwardRef;void 0===K&&(K=$);var z=function(e,t){return"function"==typeof e?e(t):e};var W=K((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,i=N(e,["innerRef","navigate","onClick"]),c=i.target,u=V(V({},i),{},{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=$!==K&&t||n,o().createElement("a",u)}));const F=K((function(e,t){var n=e.to,r=e.replace,a=void 0!==r&&r,c=e.innerRef,u=e.component,l=void 0===u?W:u,f=N(e,["to","replace","innerRef","component"]);return o().createElement(i.Consumer,null,(function(e){var r=e.history,i=e.location,u=(0,E.createLocation)({path:z(n,i),currentLocation:i}),s=u?(0,E.createPath)(u):"",p=V(V({},f),{},{href:s,navigate:function(){var t=z(n,e.location);(a?r.replace:r.push)(t)}});return $!==K?p.ref=t||c:p.innerRef=c,o().createElement(l,p)}))}))},391:(e,t,n)=>{var r,o,a,i;function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e=n.nmd(e),self,i=function(){return function(){"use strict";var e={"./config/index.js":function(e,t,n){n.r(t),n.d(t,{BeforeUnloadEventType:function(){return r},HashChangeEventType:function(){return o},PopStateEventType:function(){return a},actionType:function(){return i},enumValueType:function(){return c}});var r="beforeunload",o="hashchange",a="popstate",i={push:"PUSH",replace:"REPLACE",pop:"POP"},c={object:"Object",array:"Array",basic:"Basic"}},"./node_modules/resolve-pathname/esm/resolve-pathname.js":function(e,t,n){function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),n.d(t,{default:function(){return a}});var a=function(e,t){void 0===t&&(t="");var n,a=e&&e.split("/")||[],i=t&&t.split("/")||[],c=e&&r(e),u=t&&r(t),l=c||u;if(e&&r(e)?i=a:a.length&&(i.pop(),i=i.concat(a)),!i.length)return"/";if(i.length){var f=i[i.length-1];n="."===f||".."===f||""===f}else n=!1;for(var s=0,p=i.length;p>=0;p--){var h=i[p];"."===h?o(i,p):".."===h?(o(i,p),s++):s&&(o(i,p),s--)}if(!l)for(;s--;s)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var y=i.join("/");return n&&"/"!==y.substr(-1)&&(y+="/"),y}},"./src/createBrowserHistory.js":function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var r=n("./utils/index.js"),o=n("./config/index.js"),a=n("./utils/LocationUtils.js");function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.window,n=void 0===t?document.defaultView:t,i=e.isShowBeforeUnload,c=void 0!==i&&i,u=e.basename?(0,r.stripTrailingSlash)((0,r.addLeadingSlash)(e.basename)):"",l=n.history,f=(0,r.createEventList)({removeCallback:d}),s=(0,r.createEventList)({isNeedResult:!0,removeCallback:d}),p=o.actionType.pop,h=(0,a.createLocation)({path:n.location,basename:u,state:l.state});function y(e){var t=(0,a.createLocation)({path:n.location,basename:u,state:l.state});(0,a.createPath)(t)!==(0,a.createPath)(h)&&function(e){if(v)v=!1,console.log("blockedPopTx",v);else{var t={action:o.actionType.pop,location:e};if(s.length)if(s.call(t))console.log(h,e),h=e;else{var n=h.state.index-e.state.index;console.log("isNotOk",v,h,e),g(n)}else m(t)}}(t)}function d(){n.removeEventListener(o.PopStateEventType,y)}n.addEventListener(o.PopStateEventType,y);var v=null;function b(e){var t=e.action,n=e.location;return!s.length||s.call({action:t,location:n})}function m(e){p=e.action,h=e.location,f.call({action:p,location:h})}function g(e){l.go(e)}function O(e){c&&(e.preventDefault(),e.returnValue="")}return{get action(){return p},get location(){return h},createHref:function(e){if("string"==typeof e)return(0,a.createPath)((0,a.createLocation)({path:e,basename:u}))},push:function(e,t){var n=o.actionType.push,r=Object.assign({},t,{index:h.state&&h.state.index+1}),i=(0,a.createLocation)({path:e,state:r,basename:u}),c={action:n,location:i};if(b(c)){try{var f=(0,a.getBaseHref)()+u+(0,a.createPath)(i);l.pushState(r,"",f)}catch(e){console.error(e)}m(c)}},replace:function(e,t){var n=o.actionType.push,r=Object.assign({},t,{index:h.state&&h.state.index}),i=(0,a.createLocation)({path:e,state:r,basename:u}),c={action:n,location:i};if(b(c)){try{var f=(0,a.getBaseHref)()+u+(0,a.createPath)(i);l.replaceState(r,"",f)}catch(e){console.error(e)}m(c)}},go:g,back:function(){g(-1)},forward:function(){g(1)},listen:function(e){return f.push(e)},block:function(e){var t=s.push(e);return 1===s.length&&n.addEventListener(o.BeforeUnloadEventType,O),function(){t(),s.length||n.removeEventListener(o.BeforeUnloadEventType,O)}}}}},"./src/createHashHistory.js":function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var r=n("./utils/index.js"),o=n("./config/index.js"),a=n("./utils/LocationUtils.js");function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.window,n=void 0===t?document.defaultView:t,i=e.isShowBeforeUnload,c=void 0!==i&&i,u=e.basename?(0,r.stripTrailingSlash)((0,r.addLeadingSlash)(e.basename)):"",l=n.history,f=(0,r.createEventList)({removeCallback:d}),s=(0,r.createEventList)({isNeedResult:!0,removeCallback:d}),p=o.actionType.pop,h=(0,a.createLocation)({path:n.location.hash.substr(1),basename:u,state:l.state});function y(e){var t=(0,a.createLocation)({path:n.location.hash.substr(1),basename:u,state:l.state});(0,a.createPath)(t)!==(0,a.createPath)(h)&&function(e){var t={action:o.actionType.pop,location:e};s.length?s.call(t)?h=e:m(h.state.index-e.state.index):b(t)}(t)}function d(){n.removeEventListener(o.HashChangeEventType,y)}function v(e){var t=e.action,n=e.location;return!s.length||s.call({action:t,location:n})}function b(e){p=e.action,h=e.location,f.call({action:p,location:h})}function m(e){l.go(e)}function g(e){c&&(e.preventDefault(),e.returnValue="")}return n.addEventListener(o.HashChangeEventType,y),{get action(){return p},get location(){return h},createHref:function(e){if("string"==typeof e)return(0,a.createPath)((0,a.createLocation)({path:e,basename:u}))},push:function(e,t){var n=o.actionType.push,r=Object.assign({},t,{index:h.state&&h.state.index+1}),i=(0,a.createLocation)({path:e,state:r,basename:u}),c={action:n,location:i};if(v(c)){try{var f=(0,a.getBaseHref)()+"#"+u+(0,a.createPath)(i);l.pushState(r,"",f)}catch(e){console.error(e)}b(c)}},replace:function(e,t){var n=o.actionType.push,r=Object.assign({},t,{index:h.state&&h.state.index}),i=(0,a.createLocation)({path:e,state:r,basename:u}),c={action:n,location:i};if(v(c)){try{var f=(0,a.getBaseHref)()+"#"+u+(0,a.createPath)(i);l.replaceState(r,"",f)}catch(e){console.error(e)}b(c)}},go:m,back:function(){m(-1)},forward:function(){m(1)},listen:function(e){return f.push(e)},block:function(e){var t=s.push(e);return 1===s.length&&n.addEventListener(o.BeforeUnloadEventType,g),function(){t(),s.length||n.removeEventListener(o.BeforeUnloadEventType,g)}}}}},"./src/index.js":function(e,t,n){n.r(t),n.d(t,{createHashHistory:function(){return r.default},createBrowserHistory:function(){return o.default},createLocation:function(){return a.createLocation},createPath:function(){return a.createPath},getBaseHref:function(){return a.getBaseHref},hasBasename:function(){return a.hasBasename},locationsAreEqual:function(){return a.locationsAreEqual},parsePath:function(){return a.parsePath},stripBasename:function(){return a.stripBasename},addLeadingSlash:function(){return i.addLeadingSlash},createEventList:function(){return i.createEventList},getUniqueKey:function(){return i.getUniqueKey},getValueType:function(){return i.getValueType},isObject:function(){return i.isObject},stripLeadingSlash:function(){return i.stripLeadingSlash},stripTrailingSlash:function(){return i.stripTrailingSlash},valueEqual:function(){return i.valueEqual}});var r=n("./src/createHashHistory.js"),o=n("./src/createBrowserHistory.js"),a=n("./utils/LocationUtils.js"),i=n("./utils/index.js")},"./utils/LocationUtils.js":function(e,t,n){n.r(t),n.d(t,{createLocation:function(){return o},parsePath:function(){return a},createPath:function(){return i},hasBasename:function(){return c},stripBasename:function(){return l},getBaseHref:function(){return f},locationsAreEqual:function(){return s}});var r=n("./utils/index.js");function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.path,n=e.basename,o=e.key,i=void 0===o?(0,r.getUniqueKey)():o,c=e.state,l=void 0===c?{index:0}:c,f=e.currentLocation;return u(u({},a(t,n,f)),{},{key:i,state:l})}function a(e,t,n){var r={pathname:"/",search:"",hash:""};"string"==typeof e?r.pathname=e||"/":r=Object.assign(r,u({},e));var o=r.pathname.indexOf("#");o>-1&&(r.hash=r.pathname.substr(o),r.pathname=r.pathname.substr(0,o));var a=r.pathname.indexOf("?");return a>-1&&(r.search=r.pathname.substr(a),r.pathname=r.pathname.substr(0,a)),r.pathname=l(r.pathname,t),n?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=resolvePathname(r.pathname,n.pathname)):r.pathname=n.pathname:r.pathname||(r.pathname="/"),{pathname:r.pathname,search:"?"===r.search?"":r.search,hash:"#"===r.hash?"":r.hash}}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?".concat(n)),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#".concat(r)),o}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}function l(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return c(e,t)?e.substr(t.length):e}function f(){var e=document.querySelector("base"),t="";if(e&&e.getAttribute("href")){var n=window.location.href,r=n.indexOf("#");t=-1===r?n:n.slice(0,r)}return t}function s(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,r.valueEqual)(e.state,t.state)}n("./node_modules/resolve-pathname/esm/resolve-pathname.js")},"./utils/index.js":function(e,t,n){n.r(t),n.d(t,{createEventList:function(){return o},getUniqueKey:function(){return a},isObject:function(){return i},getValueType:function(){return c},valueEqual:function(){return u},addLeadingSlash:function(){return l},stripLeadingSlash:function(){return s},stripTrailingSlash:function(){return p}});var r=n("./config/index.js");function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.isNeedResult,n=void 0!==t&&t,r=e.removeCallback,o=[];return{get length(){return o.length},push:function(e){return o.push(e),function(){(o=o.filter((function(t){return t!==e}))).length||r&&r()}},call:function(e){for(var t=!0,r=0,a=o.length;r<a;r++){var i=o[r];if(t=i&&i(e),n&&!t)break}return t}}}function a(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=Date.now().toString(32)+e.toString(),n=[],r=1,o=0,a=1,i=t.length;a<=i;a++)a===r&&(n[o]=String.fromCharCode(65+Math.floor(22*Math.random())),o++,r*=2),n[o]=t[a-1],o++;return n.join("")}function i(e){return e&&"object"==f(e)&&"[object Object]"===toString.call(e)}function c(e){r.enumValueType.basic,i(e)&&r.enumValueType.object,Array.isArray(e)&&r.enumValueType.array}function u(e,t){var n=c(e);if(n!==c(t))return!1;if(n===r.enumValueType.basic)return e===t;if(n===r.enumValueType.object)for(var o=Object.keys(e),a=0,i=o.length;a<i;a++){var l=o[a];if(!u(e[l],t[l]))return!1}if(n===r.enumValueType.array){if(e.length!==t.length)return falsei;for(var f=0,s=e.length;f<s;f++)if(!u(e[f],t[f]))return!1}return!1}function l(e){return"/"===e.charAt(0)?e:"/"+e}function s(e){return"/"===e.charAt(0)?e.substr(1):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}return n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n("./src/index.js")}()},"object"==f(t)&&"object"==f(e)?e.exports=i():(o=[],void 0===(a="function"==typeof(r=i)?r.apply(t,o):r)||(e.exports=a))},433:(e,t)=>{"use strict";function n(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return c=e.done,e},e:function(e){u=!0,i=e},f:function(){try{c||null==n.return||n.return()}finally{if(u)throw i}}}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e){throw new TypeError('"'+e+'" is read-only')}var a="NAME",i="CHAR",c="OPEN",u="CLOSE",l="ESCAPED_CHAR",f="MODIFIER",s="PATTERN",p="END";function h(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function y(e){for(var t=[],n=0,r=e.length;n<r;){var o=e[n];if("*"!==o&&"+"!==o&&"?"!==o)if("\\"!==o)if("{"!==o)if("}"!==o)if(":"!==o)if("("!==o)t.push({type:i,index:n,value:e[n++]});else{var h=n+1,y="",d=1;if("?"===e[h])throw new SyntaxError('Pattern cannot start with "?" at '.concat(h));for(;h<r;){var v=e[h];if("\\"!==v){if(")"===v){if(0===--d){h++;break}}else if("("===v&&(d++,"?"!==e[h+1]))throw new TypeError("Capturing groups are not allowed at ".concat(h));y+=e[h++]}else y+=e[h++]+e[h++]}if(d)throw new TypeError("Unbalanced pattern at ".concat(n));if(!y)throw new TypeError("Missing pattern at ".concat(n));t.push({type:s,index:n,value:y}),n=h}else{for(var b="",m=n+1;m<r;){var g=e.charCodeAt(m);if(!(g>=48&&g<=57||g>=65&&g<=90||g>=97&&g<=122||95===g))break;b+=e[m++]}if(!b)throw new TypeError("Missing parameter name at ".concat(n));t.push({type:a,index:n,value:b}),n=m}else t.push({type:u,index:n,value:o}),n++;else t.push({type:c,index:n,value:o}),n++;else t.push({type:l,index:n,value:o}),n++;else t.push({type:f,index:n,value:o}),n++}return t.push({type:p,index:n,value:""}),t}function d(e){return e&&e.sensitive?"":"i"}function v(e,t,r){return function(e,t,r){var o,a=r.strict,i=void 0!==a&&a,c=r.start,u=void 0===c||c,l=r.end,f=void 0===l||l,s=r.encode,p=void 0===s?function(e){return e}:s,y="[".concat(h(r.endsWith||""),"]|$"),v="[".concat(h(r.delimiter||"/#?"),"]"),b=u?"^":"",m=n(e);try{for(m.s();!(o=m.n()).done;){var g=o.value;if("string"==typeof g)b+=h(p(g));else{var O=h(p(g.prefix)),j=h(p(g.suffix));if(g.pattern)if(t&&t.push(g),O||j)if("+"===g.modifier||"*"===g.modifier){var w="*"===g.modifier?"?":"";b+="(?:".concat(O,"((?:").concat(g.pattern,")(?:").concat(j).concat(O,"(?:").concat(g.pattern,"))*)").concat(j,")").concat(w)}else b+="(?:".concat(O,"(").concat(g.pattern,")").concat(j,")").concat(g.modifier);else b+="(".concat(g.pattern,")").concat(g.modifier);else b+="(?:".concat(O).concat(j,")").concat(g.modifier)}}}catch(e){m.e(e)}finally{m.f()}if(f)i||(b+="".concat(v,"?")),b+=r.endsWith?"(?=".concat(y,")"):"$";else{var E=e[e.length-1],x="string"==typeof E?v.indexOf(E[E.length-1])>-1:void 0===E;i||(b+="(?:".concat(v,"(?=").concat(y,"))?")),x||(b+="(?=".concat(v,"|").concat(y,")"))}return new RegExp(b,d(r))}(function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=y(e),r=t.prefixes,d=void 0===r?"./":r,v="[^".concat(h(t.delimiter||"/#?"),"]+?"),b=0,m=n.length,g=[],O="",j=0,w=function(e){var t=null;return b<m&&n[b].type===e&&(t=n[b].value,b++),t},E=function(e){var t=w(e);if(void 0!==t)return t;var r=n[b],o=r.type,a=r.index;throw new TypeError("Unexpected ".concat(o," at ").concat(a,", expected ").concat(e))},x=function(){for(var e,t="";e=w(i)||w(l);)t+=e;return t};b<m;){var S=w(i),P=w(a),A=w(s);if(P||A){var T=S||"";-1===d.indexOf(T)&&(O+=T,o("prefix"),T=""),O&&(g.push(O),O=""),g.push({name:P||j++,prefix:T,suffix:"",pattern:A||v,modifier:w(f)||""})}else{var L=S||w(l);if(L)O+=L;else if(O)g.push(O),O="";else{if(w(c)){var C=x(),k=w(a)||"",R=w(s)||"",H=x();E(u),g.push({name:k||(R?j++:""),prefix:C,suffix:H,pattern:k&&!R?v:R,modifier:w(f)||""})}else E(p)}}}return g}(e,r),t,r)}function b(e,t,n){return e instanceof RegExp?function(e,t){if(!t)return e;for(var n=0,r=/\((?:\?<(.*?)>)?(?!\?)/g.exec(e.source);r;)t.push({name:r[1]||n++,prefix:"",suffix:"",modifier:"",pattern:""}),r=groupsRegex.exec(e.source);return e}(e,t):Array.isArray(e)?function(e,t,n){var r=e.map((function(e){return b(e,t,n).source}));return new RegExp("(?:".concat(r.join("|"),")"),d(n))}(e,t,n):v(e,t,n)}t.B=b},698:t=>{"use strict";t.exports=e}},n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={id:e,loaded:!1,exports:{}};return t[e](o,o.exports,r),o.loaded=!0,o.exports}return r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r(353)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9jcmVhdGVOYW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9Sb3V0ZXJDb250ZXh0LmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvLi4vc3JjL0hpc3RvcnlDb250ZXh0LmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvLi4vc3JjL1JvdXRlci5qcyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9tYXRjaC5qcyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9MaWZlY3ljbGUuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci8uLi9zcmMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci8uLi9zcmMvU3dpdGNoLmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvLi4vc3JjL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci8uLi9zcmMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyLy4uL3NyYy9MaW5rLmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvenlsaWFuZ0hpc3Rvcnkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvenlsaWFuZ0hpc3RvcnkvY29uZmlnL2luZGV4LmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvenlsaWFuZ0hpc3Rvcnkvbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci96eWxpYW5nSGlzdG9yeS9zcmMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci96eWxpYW5nSGlzdG9yeS9zcmMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci96eWxpYW5nSGlzdG9yeS91dGlscy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvenlsaWFuZ0hpc3RvcnkvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci96eWxpYW5nSGlzdG9yeS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3p5bGlhbmdIaXN0b3J5L3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3dlYnBhY2s6L3p5bGlhbmdIaXN0b3J5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3dlYnBhY2s6L3p5bGlhbmdIaXN0b3J5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci93ZWJwYWNrOi96eWxpYW5nSGlzdG9yeS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvLi4vdXRpbHMvcGF0aC10by1yZWdleHAuanMiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci9leHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdFwiLFwiY29tbW9uanMyXCI6XCJyZWFjdFwiLFwiY29tbW9uanNcIjpcInJlYWN0XCIsXCJhbWRcIjpcInJlYWN0XCJ9Iiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci93ZWJwYWNrL3N0YXJ0dXAiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly96eWxpYW5nUm91dGVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8venlsaWFuZ1JvdXRlci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3p5bGlhbmdSb3V0ZXIvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzY5OF9fIiwibmFtZSIsImRlZmF1bHRWYWx1ZSIsImNvbnRleHQiLCJSZWFjdCIsImRpc3BsYXlOYW1lIiwiY3JlYXRlTmFtZUNvbnRleHQiLCJwcm9wcyIsInBhdGhuYW1lIiwiY2hpbGRyZW4iLCJoaXN0b3J5Iiwic3RhdGljQ29udGV4dCIsInVzZVN0YXRlIiwibG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsInVzZUVmZmVjdCIsInVuTGlzdGVuIiwibGlzdGVuIiwiYWN0aW9uIiwiUm91dGVyQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJtYXRjaCIsInBhdGgiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiSGlzdG9yeUNvbnRleHQiLCJjYWNoZSIsImNhY2hlUGF0aExpc3QiLCJjYWNoZUNvdW50IiwiY29tcGlsZVBhdGgiLCJvcHRpb25zIiwia2V5cyIsInJlZ2V4cCIsInBhdGhUb1JlZ2V4cCIsInJlc3VsdCIsInB1c2giLCJyZW1vdmVQYXRoIiwic2hpZnQiLCJtYXRjaFBhdGgiLCJsb2NhdGlvblBhdGgiLCJBcnJheSIsImlzQXJyYXkiLCJleGFjdCIsInN0cmljdCIsInNlbnNpdGl2ZSIsInBhdGhzIiwiY29uY2F0IiwicmVkdWNlIiwibWF0Y2hlZCIsImVuZCIsImV4ZWMiLCJ2YWx1ZXMiLCJtZW1vIiwia2V5IiwiaW5kZXgiLCJjb21wb25lbnQiLCJyZW5kZXIiLCJjb21wdXRlZE1hdGNoIiwiQ29uc3VtZXIiLCJjb25zb2xlIiwibG9nIiwibm93TG9jYXRpb24iLCJub3dNYXRjaCIsIm5ld1Byb3BzIiwiaXNFbXB0eUNoaWxkcmVuIiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsIm9uVXBkYXRlIiwidG8iLCJmcm9tIiwibWV0aG9kIiwicmVwbGFjZSIsIm5ld0xvY2F0aW9uIiwiY3JlYXRlTG9jYXRpb24iLCJyZWRpcmVjdEZ1bmMiLCJ0b1BhdGgiLCJwcmV2TG9jYXRpb24iLCJsb2NhdGlvbnNBcmVFcXVhbCIsImVsZW1lbnQiLCJjaGlsZCIsImNyZWF0ZUhpc3RvcnkiLCJmb3J3YXJkUmVmU2hpbSIsIkMiLCJmb3J3YXJkUmVmIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJMaW5rQnV0dG9uIiwicmVmcyIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJvbkNsaWNrIiwib3RoZXJzUHJvcHMiLCJ0YXJnZXQiLCJldmVudCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiaXNNb2RpZmllZEV2ZW50IiwicmVmIiwiaHJlZiIsImNyZWF0ZVBhdGgiLCJCZWZvcmVVbmxvYWRFdmVudFR5cGUiLCJIYXNoQ2hhbmdlRXZlbnRUeXBlIiwiUG9wU3RhdGVFdmVudFR5cGUiLCJhY3Rpb25UeXBlIiwicG9wIiwiZW51bVZhbHVlVHlwZSIsIm9iamVjdCIsImFycmF5IiwiYmFzaWMiLCJpc0Fic29sdXRlIiwiY2hhckF0Iiwic3BsaWNlT25lIiwibGlzdCIsImkiLCJrIiwibiIsImxlbmd0aCIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0Iiwiam9pbiIsInN1YnN0ciIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5Iiwid2luZG93IiwiZG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzU2hvd0JlZm9yZVVubG9hZCIsImJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiYWRkTGVhZGluZ1NsYXNoIiwiZ2xvYmFsSGlzdG9yeSIsImxpc3RlbmVycyIsImNyZWF0ZUV2ZW50TGlzdCIsInJlbW92ZUNhbGxiYWNrIiwicmVtb3ZlUG9wU3RhdGVFdmVudExpc3RlbkZ1bmMiLCJibG9ja2VycyIsImlzTmVlZFJlc3VsdCIsInN0YXRlIiwicG9wU3RhdGVFdmVudExpc3RlbkZ1bmMiLCJuZXh0TG9jYXRpb24iLCJibG9ja2VkUG9wVHgiLCJzZW5kRGF0YSIsImNhbGwiLCJsYXN0SW5kZXgiLCJnbyIsImFwcGx5VG8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFsbG93VG8iLCJwcm9tcHRCZWZvcmVVbmxvYWQiLCJyZXR1cm5WYWx1ZSIsImNyZWF0ZUhyZWYiLCJuZXdBY3Rpb24iLCJuZXdTdGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsImdldEJhc2VIcmVmIiwicHVzaFN0YXRlIiwiZXJyb3IiLCJyZXBsYWNlU3RhdGUiLCJiYWNrIiwiZm9yd2FyZCIsImxpc3RlbmVyIiwiYmxvY2siLCJibG9ja2VyIiwidW5ibG9jayIsImNyZWF0ZUhhc2hIaXN0b3J5IiwicmVtb3ZlSGFzaENoYW5nZUV2ZW50TGlzdGVuRnVuYyIsImhhc2giLCJoYXNoQ2hhbmdlRXZlbnRMaXN0ZW5GdW5jIiwiZ2V0VW5pcXVlS2V5IiwicGFyc2VQYXRoIiwibG9jYXRpb25SZXN1bHQiLCJzZWFyY2giLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJzdHJpcEJhc2VuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJ0b0xvd2VyQ2FzZSIsImJhc2UiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwic2xpY2UiLCJhIiwiYiIsInZhbHVlRXF1YWwiLCJmbiIsImZpbHRlciIsIml0ZW0iLCJhcmciLCJsZW4iLCJiYXNlRGF0YSIsIkRhdGUiLCJub3ciLCJ0b1N0cmluZyIsIm5ld0tleSIsInZlcmlmaWNhdGlvbkRhdGEiLCJuZXdLZXlJbmRleCIsImoiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpc09iamVjdCIsIm9iaiIsImdldFZhbHVlVHlwZSIsInZhbCIsInZhbHVlQSIsInZhbHVlQiIsInZhbHVlQVR5cGUiLCJmYWxzZWkiLCJzdHJpcExlYWRpbmdTbGFzaCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ0b2tlbnNUeXBlIiwiZXNjYXBlU3RyaW5nIiwic3RyIiwibGV4ZXIiLCJ0b2tlbnMiLCJzdHJMZW5ndGgiLCJjaGFyIiwidHlwZSIsInBhdHRlcm4iLCJjb3VudCIsIlN5bnRheEVycm9yIiwicGF0dGVybkNoYXIiLCJUeXBlRXJyb3IiLCJjb2RlIiwiY2hhckNvZGVBdCIsImZsYWdzIiwic3RyaW5nVG9SZWdleHAiLCJzdGFydCIsImVuY29kZSIsIngiLCJlbmRzV2l0aCIsImRlbGltaXRlciIsInJvdXRlIiwidG9rZW4iLCJzdWZmaXgiLCJtb2RpZmllciIsIm1vZCIsImVuZFRva2VuIiwiaXNFbmREZWxpbWl0ZWQiLCJ1bmRlZmluZWQiLCJSZWdFeHAiLCJ0b2tlbnNUb1JlZ2V4cCIsInByZWZpeGVzIiwiZGVmYXVsdFBhdHRlcm4iLCJ0b2tlbnNMZW5ndGgiLCJ0cnlDb25zdW1lIiwibXVzdENvbnN1bWUiLCJuZXh0VHlwZSIsImNvbnN1bWVUZXh0IiwicGFyc2UiLCJleGVjUmVzdWx0Iiwic291cmNlIiwiZ3JvdXBzUmVnZXgiLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwibWFwIiwiYXJyYXlUb1JlZ2V4cCIsImlkIiwibG9hZGVkIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsIm5tZCJdLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxDQUFDLFNBQVVKLEdBQ1EsaUJBQVpDLFFBQ2RBLFFBQXVCLGNBQUlELEVBQVFHLFFBQVEsVUFFM0NKLEVBQW9CLGNBQUlDLEVBQVFELEVBQVksT0FSOUMsQ0FTR08sTUFBTSxTQUFTQyxHQUNsQixNLG1MQ0ZBLFFBTjBCLFNBQUNDLEVBQU1DLEdBQy9CLElBQUlDLEVBQVVDLGtCQUFvQkYsR0FFbEMsT0FEQUMsRUFBUUUsWUFBY0osRUFDZkUsR0NIVCxRQURnQkcsRUFBa0IsVUNDbEMsUUFEZ0JBLEVBQWtCLGtCLHU4QkM0Q2xDLFFBdkNBLFNBQWdCQyxHQUFPLElBSEdDLEVBS3RCQyxFQUdFRixFQUhGRSxTQUNBQyxFQUVFSCxFQUZGRyxRQUhtQixFQUtqQkgsRUFERkkscUJBSm1CLGNBTVdDLGNBQVNGLEVBQVFHLFVBTjVCLEdBTWRBLEVBTmMsS0FNSkMsRUFOSSxLQXlCckIsT0FqQkFDLGdCQUFVLFdBQ1JELEVBQVlKLEVBQVFHLFVBQ3BCLElBQUlHLEVBQVcsS0FRZixPQU5LTCxJQUNISyxFQUFXTixFQUFRTyxRQUFPLFlBQTBCLEVBQXZCQyxPQUF1QixJQUFmTCxFQUFlLEVBQWZBLFNBQ25DQyxFQUFZRCxPQUlULFdBQ0RHLEdBQ0ZBLE9BR0gs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QWMsQ0FBRTJCLE9BQU8sS0NMdkRvTixFQUFvQmtFLElBQU9oVCxJQUMxQkEsRUFBT29ELE1BQVEsR0FDVnBELEVBQU9jLFdBQVVkLEVBQU9jLFNBQVcsSUFDakNkLEdMQUQ4TyxFQUFvQixNIiwiZmlsZSI6InJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInp5bGlhbmdSb3V0ZXJcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wienlsaWFuZ1JvdXRlclwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzY5OF9fKSB7XG5yZXR1cm4gIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgY3JlYXRlTmFtZUNvbnRleHQgPSAobmFtZSwgZGVmYXVsdFZhbHVlKSA9PiB7XHJcbiAgbGV0IGNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSk7XHJcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XHJcbiAgcmV0dXJuIGNvbnRleHQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOYW1lQ29udGV4dDtcclxuIiwiaW1wb3J0IGNyZWF0ZU5hbWVDb250ZXh0IGZyb20gXCIuL2NyZWF0ZU5hbWVDb250ZXh0XCI7XHJcbmNvbnN0IGNvbnRleHQgPSBjcmVhdGVOYW1lQ29udGV4dChcIlJvdXRlclwiKTtcclxuZXhwb3J0IGRlZmF1bHQgY29udGV4dDtcclxuIiwiaW1wb3J0IGNyZWF0ZU5hbWVDb250ZXh0IGZyb20gXCIuL2NyZWF0ZU5hbWVDb250ZXh0XCI7XHJcbmNvbnN0IGNvbnRleHQgPSBjcmVhdGVOYW1lQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xyXG5leHBvcnQgZGVmYXVsdCBjb250ZXh0O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHRcIjtcclxuaW1wb3J0IEhpc3RvcnlDb250ZXh0IGZyb20gXCIuL0hpc3RvcnlDb250ZXh0XCI7XHJcbmZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcclxuICByZXR1cm4geyBwYXRoOiBcIi9cIiwgdXJsOiBcIi9cIiwgcGFyYW1zOiB7fSwgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiIH07XHJcbn1cclxuZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgY2hpbGRyZW4sXHJcbiAgICBoaXN0b3J5LFxyXG4gICAgc3RhdGljQ29udGV4dCA9IGZhbHNlLCAvLyDmmK/lkKbmmK/mnI3liqHnq6/muLLmn5PnmoTmoIflv5dcclxuICB9ID0gcHJvcHM7XHJcbiAgY29uc3QgW2xvY2F0aW9uLCBzZXRMb2NhdGlvbl0gPSB1c2VTdGF0ZShoaXN0b3J5LmxvY2F0aW9uKTsgLy8gbG9jYXRpb25cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldExvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24pO1xyXG4gICAgbGV0IHVuTGlzdGVuID0gbnVsbDtcclxuICAgIC8vIOS4jeaYr+acjeWKoeerr+a4suafk+eahOaDheWGteS4i+aJjVxyXG4gICAgaWYgKCFzdGF0aWNDb250ZXh0KSB7XHJcbiAgICAgIHVuTGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oKHsgYWN0aW9uLCBsb2NhdGlvbiB9KSA9PiB7XHJcbiAgICAgICAgc2V0TG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBpZiAodW5MaXN0ZW4pIHtcclxuICAgICAgICB1bkxpc3RlbigpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sIFtoaXN0b3J5XSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Um91dGVyQ29udGV4dC5Qcm92aWRlclxyXG4gICAgICB2YWx1ZT17e1xyXG4gICAgICAgIGhpc3RvcnksXHJcbiAgICAgICAgbG9jYXRpb24sXHJcbiAgICAgICAgbWF0Y2g6IGNvbXB1dGVSb290TWF0Y2gobG9jYXRpb24ucGF0aG5hbWUpLFxyXG4gICAgICAgIHN0YXRpY0NvbnRleHQsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxIaXN0b3J5Q29udGV4dC5Qcm92aWRlciBjaGlsZHJlbj17Y2hpbGRyZW59IHZhbHVlPXtoaXN0b3J5fSAvPlxyXG4gICAgPC9Sb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcclxuIiwiaW1wb3J0IHsgcGF0aFRvUmVnZXhwIH0gZnJvbSBcIi4uL3V0aWxzL3BhdGgtdG8tcmVnZXhwXCI7XHJcbi8qKlxyXG4gKiDnvJPlrZjliKTmlq3ov4fnmoTmlbDmja5cclxuICovXHJcbmxldCBjYWNoZSA9IHt9O1xyXG5sZXQgY2FjaGVQYXRoTGlzdCA9IFtdO1xyXG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XHJcbmxldCBjYWNoZUNvdW50ID0gMDtcclxuLyoqXHJcbiAqIOavlOi+g+WIpOaWrXBhdGhcclxuICogQHBhcmFtIHsqfSBwYXRoXHJcbiAqIEBwYXJhbSB7Kn0gb3B0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMgPSB7fSkge1xyXG4gIGlmIChjYWNoZVtwYXRoXSkge1xyXG4gICAgcmV0dXJuIGNhY2hlW3BhdGhdO1xyXG4gIH1cclxuICBsZXQga2V5cyA9IFtdO1xyXG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcclxuICBjb25zdCByZXN1bHQgPSB7IHJlZ2V4cCwga2V5cyB9O1xyXG5cclxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcclxuICAgIGNhY2hlW3BhdGhdID0gcmVzdWx0O1xyXG4gICAgY2FjaGVQYXRoTGlzdC5wdXNoKHBhdGgpO1xyXG4gICAgY2FjaGVDb3VudCsrO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyDov5nph4zph4fnlKjmk43kvZzns7vnu5/nmoTnvJPlrZjnrpfms5XvvIzogIPomZHliLDmlbTkvZPnmoTlpI3mnYLluqbvvIzmhJ/op4nov5jmmK/kvb/nlKjlhYjov5vlhYjlh7rnrpfms5UoRklGTynlrrnmmJPkuIDngrnvvIzlj6/ku6XogIPomZHlhbbku5bnvJPlrZjnrpfms5VcclxuICAgIGNvbnN0IHJlbW92ZVBhdGggPSBjYWNoZVBhdGhMaXN0LnNoaWZ0KCk7XHJcbiAgICBkZWxldGUgY2FjaGVbcmVtb3ZlUGF0aF07XHJcbiAgICBjYWNoZVtwYXRoXSA9IHJlc3VsdDtcclxuICAgIGNhY2hlUGF0aExpc3QucHVzaChwYXRoKTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWIpOaWreaYr+WQpuespuWQiOi3r+eUseadoeS7tlxyXG4gKiBAcGFyYW0geyp9IHBhdGhcclxuICogQHBhcmFtIHsqfSB0YXJnZXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFBhdGgobG9jYXRpb25QYXRoLCBvcHRpb25zID0ge30pIHtcclxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xyXG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xyXG4gIH1cclxuICBjb25zdCB7XHJcbiAgICBwYXRoLCAvLyDlnLDlnYBcclxuICAgIGV4YWN0ID0gZmFsc2UsIC8vIOeUqOS6juWMuemFjee7k+WwvlxyXG4gICAgc3RyaWN0ID0gZmFsc2UsIC8vIOivpue7huWMuemFjVxyXG4gICAgc2Vuc2l0aXZlID0gZmFsc2UsIC8vIOWkp+Wwj+WGmeaVj+aEnyx0cnVlIOS4jeWMuuWIhiBmYWxzZeWMuuWIhlxyXG4gIH0gPSBvcHRpb25zO1xyXG5cclxuICAvLyDpgb/lhY1vcHRpb25zIOaYryDmlbDnu4TnmoTmg4XlhrVcclxuICBjb25zdCBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcclxuICAvLyDlj6rlpITnkIbmlbDnu4TnmoTnrKzkuIDkuKrvvIzlhbbku5ZcclxuICByZXR1cm4gcGF0aHMucmVkdWNlKChtYXRjaGVkLCBwYXRoKSA9PiB7XHJcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBlbmQ6IGV4YWN0LFxyXG4gICAgICBzdHJpY3QsXHJcbiAgICAgIHNlbnNpdGl2ZSxcclxuICAgIH07XHJcbiAgICAvLyDnlJ/miJBwYXRo55qE5q2j5YiZ6KGo6L6+5byPXHJcbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwgb3B0aW9ucyk7XHJcblxyXG4gICAgLy8g5Yik5pat5piv5ZCm5Yy56YWN6Lev55Sx5ZOmXHJcbiAgICBjb25zdCBtYXRjaCA9IHJlZ2V4cC5leGVjKGxvY2F0aW9uUGF0aCk7XHJcblxyXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XHJcbiAgICAvLyDnrKzkuIDkuKrlgLzmmK/ljLnphY3liLDnmoR1cmzlhoXlrrnvvIzlkI7pnaLnmoTlr7nlupQ6dGVzdCDov5nnp43liqjmgIHot6/nlLHnmoTlgLxcclxuICAgIGNvbnN0IFt1cmwsIC4uLnZhbHVlc10gPSBtYXRjaDtcclxuICAgIGNvbnN0IGlzRXhhY3QgPSBsb2NhdGlvblBhdGggPT09IHVybDtcclxuXHJcbiAgICAvLyDkuI3ljLnphY3nmoTml7blgJnov5Tlm55udWxsXHJcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xyXG4gICAgLy8gVE9ETyDov5nph4zpnIDopoHogIPomZHkuIDkuKrpl67popjvvIzlpoLmnpzlrZjlnKjkuKTkuKrpg73og73ljLnphY3liLDnmoTot6/nlLHnmoTml7blgJnvvIzkvJjlhYjnuqfmmK/mgI7kuYjmoLfnmoRcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcclxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXHJcbiAgICAgIGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxyXG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgLy8g55Sf5oiQcGFyYW1z5a+56LGhXHJcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBtZW1vO1xyXG4gICAgICB9LCB7fSksXHJcbiAgICB9O1xyXG4gIH0sIG51bGwpO1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBtYXRjaFBhdGggfSBmcm9tIFwiLi9tYXRjaFwiO1xyXG5cclxuLy8g5Yik5pat5piv5ZCm5piv56m655qE5a2Q5YiX6KGoXHJcbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xyXG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFJvdXRlKHByb3BzKSB7XHJcbiAgY29uc3QgeyBwYXRoLCBjb21wb25lbnQsIGNoaWxkcmVuLCByZW5kZXIsIGNvbXB1dGVkTWF0Y2ggfSA9IHByb3BzO1xyXG4gIHJldHVybiAoXHJcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cclxuICAgICAgeyhjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJSb3V0ZVwiKTtcclxuICAgICAgICBjb25zdCB7IGhpc3RvcnksIGxvY2F0aW9uLCBtYXRjaCB9ID0gY29udGV4dDtcclxuICAgICAgICBjb25zdCBub3dMb2NhdGlvbiA9IHByb3BzLmxvY2F0aW9uIHx8IGxvY2F0aW9uO1xyXG4gICAgICAgIC8vIG5vd01hdGNoIOaYr+agueaNriBwYXRoIOeUn+aIkOeahOato+WImeihqOi+vuaYr+WMuemFjeeahO+8jGNvbXB1dGVkTWF0Y2gg5piv55So5ZyoU3dpdGNo5Lit55qE77yM6L+Z5Liq5pe25YCZ5bey57uP5Yy56YWN6L+H5LqG77yM5omA5Lul5bCx5LiN6ZyA6KaB5YaN6LWwbWF0Y2hQYXRo55qE6YC76L6R5LqGXHJcbiAgICAgICAgY29uc3Qgbm93TWF0Y2ggPSBjb21wdXRlZE1hdGNoXHJcbiAgICAgICAgICA/IGNvbXB1dGVkTWF0Y2hcclxuICAgICAgICAgIDogcGF0aFxyXG4gICAgICAgICAgPyBtYXRjaFBhdGgobm93TG9jYXRpb24ucGF0aG5hbWUsIHByb3BzKVxyXG4gICAgICAgICAgOiBtYXRjaDtcclxuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IHsgLi4uY29udGV4dCwgbm93TG9jYXRpb24sIG5vd01hdGNoIH07XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG5cdFx0ICog5Yik5pat6YC76L6RIFxyXG5cdFx0ICogMeOAgeWIpOaWrSBub3dNYXRjaCDmmK/lkKblrZjlnKhcclxuXHRcdCAqIDLjgIFub3dNYXRjaCDlrZjlnKgg5YiZIOWIpOaWrSBjaGlsZHJlbiDmmK/lkKblrZjlnKhcclxuXHRcdCAqIFx0XHQyLjHjgIFjaGlsZHJlbiDlrZjlnKgg5Yik5patIGNoaWxkcmVuIOaYr+WQpuaYryBmdW5jdGlvblxyXG5cdFx0ICogXHRcdFx0Mi4xLjHjgIHmmK9mdW5jdGlvbiDliJkgY2hpbGRyZW4obmV3UHJvcHMpXHJcblx0XHQgKiBcdFx0XHQyLjEuMuOAgeS4jeaYryBmdW5jdGlvbiDliJkgY2hpbGRyZW5cclxuXHRcdCAqXHRcdDIuMuOAgWNoaWxkcmVuIOS4jeWtmOWcqCDliKTmlq0gY29tcG9uZW50IOaYr+WQpuWtmOWcqFxyXG5cdFx0XHRcdFx0IDIuMi4x44CBY29tcG9uZW50IOWtmOWcqCDliJkgUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIG5ld1Byb3BzKVxyXG5cdFx0XHRcdFx0IDIuMi4y44CBY29tcG9uZW50IOS4jeWtmOWcqCDliJkg5Yik5patIHJlbmRlciDmmK/lkKblrZjlnKhcclxuXHRcdFx0XHRcdFx0IDIuMi4yLjHjgIEgcmVuZGVyIOWtmOWcqCDliJkgcmVuZGVyKG5ld1Byb3BzKVxyXG5cdFx0XHRcdFx0XHQgMi4yLjIuMuOAgSByZW5kZXIg5LiN5a2Y5ZyoIOWImSBudWxsXHRcdFx0IFxyXG5cdFx0ICogM+OAgW5vd01hdGNoIOS4jeWtmOWcqCDliKTmlq0gY2hpbGRyZW4g5piv5ZCm5pivIGZ1bmN0aW9uXHJcblx0XHQgXHRcdDMuMeOAgeaYr2Z1bmN0aW9uIOWImSBjaGlsZHJlbihuZXdQcm9wcylcclxuXHRcdFx0XHQzLjLjgIHkuI3mmK8gZnVuY3Rpb24g5YiZIGNoaWxkcmVuXHJcblx0XHQgKi9cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e25ld1Byb3BzfT5cclxuICAgICAgICAgICAge25vd01hdGNoXHJcbiAgICAgICAgICAgICAgPyBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgICA/IGNoaWxkcmVuKG5ld1Byb3BzKVxyXG4gICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICA6IGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgbmV3UHJvcHMpXHJcbiAgICAgICAgICAgICAgICA6IHJlbmRlclxyXG4gICAgICAgICAgICAgICAgPyByZW5kZXIobmV3UHJvcHMpXHJcbiAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICAgPyBjaGlsZHJlbihuZXdQcm9wcylcclxuICAgICAgICAgICAgICA6IGNoaWxkcmVufVxyXG4gICAgICAgICAgPC9Sb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICk7XHJcbiAgICAgIH19XHJcbiAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGlmZWN5Y2xlKHByb3BzKSB7XHJcbiAgY29uc3QgeyBvbk1vdW50LCBvblVwZGF0ZSwgdG8gfSA9IHByb3BzO1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBvbk1vdW50ICYmIG9uTW91bnQoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygyMjIyMjIyMjIyKTtcclxuICAgIG9uVXBkYXRlKHByb3BzKTtcclxuICB9LCBbdG9dKTtcclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHRcIjtcclxuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcIi4uL3V0aWxzL2hpc3RvcnkubWluLmpzXCI7XHJcbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlXCI7XHJcbmltcG9ydCB7IG1hdGNoUGF0aCB9IGZyb20gXCIuL21hdGNoXCI7XHJcblxyXG5mdW5jdGlvbiBSZWRpcmVjdChwcm9wcykge1xyXG4gIGNvbnN0IHsgY29tcHV0ZWRNYXRjaCwgdG8sIHB1c2ggPSBmYWxzZSwgZnJvbSB9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIChcclxuICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxyXG4gICAgICB7KGNvbnRleHQpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJlZGlyZWN0XCIpO1xyXG4gICAgICAgIGNvbnN0IHsgaGlzdG9yeSwgc3RhdGljQ29udGV4dCwgbG9jYXRpb24gfSA9IGNvbnRleHQ7XHJcbiAgICAgICAgLy8g5aaC5p6c5pivcHVzaO+8jOWwseeUqGhpc3RvcnkucHVzaCDlkKbliJnkvb/nlKggaGlzdG9yeS5yZXBsYWNlXHJcbiAgICAgICAgY29uc3QgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcclxuICAgICAgICBjb25zdCBub3dMb2NhdGlvbiA9IHByb3BzLmxvY2F0aW9uIHx8IGxvY2F0aW9uO1xyXG4gICAgICAgIC8vIOagueaNrmZyb20g5Yy56YWNXHJcbiAgICAgICAgY29uc3Qgbm93TWF0Y2ggPSBmcm9tXHJcbiAgICAgICAgICA/IG1hdGNoUGF0aChub3dMb2NhdGlvbi5wYXRobmFtZSwge1xyXG4gICAgICAgICAgICAgIHBhdGg6IGZyb20sXHJcbiAgICAgICAgICAgICAgLi4ucHJvcHMsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgLy8g5qC55o2uIOi3s+i9rOeahOWcsOWdgOeUn+aIkGxvY2F0aW9uXHJcbiAgICAgICAgY29uc3QgbmV3TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbih7XHJcbiAgICAgICAgICBwYXRoOiB0byxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6YeN5a6a5ZCR5pa55rOVXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgcmVkaXJlY3RGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgLy8gZnJvbSDlrZjlnKjnmoTml7blgJnvvIzopoHmoLnmja5mcm9t5piv5ZCm56ym5ZCI5YaN5YGa6Lez6L2sXHJcbiAgICAgICAgICBpZiAoZnJvbSkge1xyXG4gICAgICAgICAgICBpZiAobm93TWF0Y2gpIHtcclxuICAgICAgICAgICAgICBtZXRob2QobmV3TG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbWV0aG9kKG5ld0xvY2F0aW9uKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoc3RhdGljQ29udGV4dCkge1xyXG4gICAgICAgICAgcmVkaXJlY3RGdW5jKCk7XHJcbiAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICA8TGlmZWN5Y2xlXHJcbiAgICAgICAgICAgIG9uTW91bnQ9eygpID0+IHtcclxuICAgICAgICAgICAgICByZWRpcmVjdEZ1bmMoKTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgb25VcGRhdGU9eyh0b1BhdGgpID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbih7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiB0b1BhdGgsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgICAuLi5uZXdMb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5LFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0RnVuYygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgdG89e3RvfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG4gICAgICB9fVxyXG4gICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHRcIjtcclxuaW1wb3J0IHsgbWF0Y2hQYXRoIH0gZnJvbSBcIi4vbWF0Y2hcIjtcclxuZnVuY3Rpb24gU3dpdGNoKHByb3BzKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxyXG4gICAgICB7KGNvbnRleHQpID0+IHtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XHJcblxyXG4gICAgICAgIGxldCBlbGVtZW50LCBtYXRjaDtcclxuXHJcbiAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChwcm9wcy5jaGlsZHJlbiwgKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAvLyDlvqrnjq/nmoTml7blgJnvvIzlpoLmnpxtYXRjaOWtmOWcqO+8jOWwseivtOaYjuW3sue7j+WMuemFjeWIsOS6hu+8jOi/meS4quaXtuWAmeWwseS4jemcgOimgee7p+e7reWMuemFjeS6hlxyXG4gICAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XHJcblxyXG4gICAgICAgICAgICBtYXRjaCA9IHBhdGhcclxuICAgICAgICAgICAgICA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyAuLi5jaGlsZC5wcm9wcywgcGF0aCB9KVxyXG4gICAgICAgICAgICAgIDogY29udGV4dC5tYXRjaDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDov5Tlm57nmoTlj6rmnInkuIDkuKrnrKblkIjopoHmsYLnmoRyb3V0Ze+8jOWFtuS7lnJvdXRl5LiN5Lya6YCg5oiQ5b2x5ZONXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoXHJcbiAgICAgICAgICA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KVxyXG4gICAgICAgICAgOiBudWxsO1xyXG4gICAgICB9fVxyXG4gICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN3aXRjaFxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiLi4vdXRpbHMvaGlzdG9yeS5taW4uanNcIjtcclxuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcclxuXHJcbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIocHJvcHMpIHtcclxuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcclxuICBjb25zdCBbaGlzdG9yeV0gPSB1c2VTdGF0ZSgoKSA9PiB7XHJcbiAgICByZXR1cm4gY3JlYXRlSGlzdG9yeSgpO1xyXG4gIH0pO1xyXG4gIHJldHVybiA8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9IGNoaWxkcmVuPXtjaGlsZHJlbn0gLz47XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCIuLi91dGlscy9oaXN0b3J5Lm1pbi5qc1wiO1xyXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xyXG5cclxuZnVuY3Rpb24gSGFzaFJvdXRlcihwcm9wcykge1xyXG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzO1xyXG4gIGNvbnN0IFtoaXN0b3J5XSA9IHVzZVN0YXRlKCgpID0+IHtcclxuICAgIHJldHVybiBjcmVhdGVIaXN0b3J5KCk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17aGlzdG9yeX0gY2hpbGRyZW49e2NoaWxkcmVufSAvPjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcclxuIiwiaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiLi4vdXRpbHMvaGlzdG9yeS5taW4uanNcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0XCI7XHJcbi8vIOm7mOiupOeahGZvcndhcmRSZWbmlrnms5XvvIzkvKDku4DkuYjov5Tlm57ku4DkuYhcclxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSAoQykgPT4gQztcclxuXHJcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xyXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XHJcbn1cclxuLy8g5aSE55CGZnVuY3Rpb25cclxuZXhwb3J0IGNvbnN0IHJlc29sdmVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+IHtcclxuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XHJcbn07XHJcblxyXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcclxuICAvKipcclxuICAgKiBldmVudC5tZXRhS2V5IOi/lOWbnuS4gOS4qiDluIPlsJTlgLzvvIzlnKjpvKDmoIfkuovku7blj5HnlJ/ml7bvvIznlKjkuo7mjIfnpLogTWV0YSDplK7mmK/mjInkuIvnirbmgIHvvIh0cnVl77yJ77yM6L+Y5piv6YeK5pS+54q25oCB77yIZmFsc2XvvIlcclxuICAgKiBldmVudC5hbHRLZXkg5b2T5LqL5Lu26Kem5Y+R5pe277yM5aaC5p6cYWx0IOiiq+aMieS4i++8jOWImei/lOWbniB0cnVl77yM5ZCm5YiZ6L+U5ZueZmFsc2VcclxuICAgKiBldmVudC5jdHJsS2V5IOW9k+S6i+S7tuinpuWPkeaXtu+8jOWmguaenGN0cmwg6KKr5oyJ5LiL77yM5YiZ6L+U5ZueIHRydWXvvIzlkKbliJnov5Tlm55mYWxzZVxyXG4gICAqIGV2ZW50LnNoaWZ0S2V5IOW9k+S6i+S7tuinpuWPkeaXtu+8jOWmguaenHNoaWZ0IOiiq+aMieS4i++8jOWImei/lOWbniB0cnVl77yM5ZCm5YiZ6L+U5ZueZmFsc2VcclxuICAgKi9cclxuXHJcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xyXG59XHJcblxyXG5jb25zdCBMaW5rQnV0dG9uID0gZm9yd2FyZFJlZigocHJvcHMsIHJlZnMpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXHJcbiAgICBuYXZpZ2F0ZSxcclxuICAgIG9uQ2xpY2ssXHJcbiAgICAuLi5vdGhlcnNQcm9wc1xyXG4gIH0gPSBwcm9wcztcclxuXHJcbiAgY29uc3QgeyB0YXJnZXQgfSA9IG90aGVyc1Byb3BzO1xyXG4gIGxldCBuZXdQcm9wcyA9IHtcclxuICAgIC4uLm90aGVyc1Byb3BzLFxyXG4gICAgb25DbGljayhldmVudCkge1xyXG4gICAgICAvLyDlpoLmnpzmnIljbGlja+aWueazle+8jOWwseaJp+ihjOm7mOiupOeahGNsaWNr5pa55rOVXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcclxuICAgICAgICAgIG9uQ2xpY2soZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIOmYu+atoum7mOiupOS6i+S7tlxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogZXZlbnQuZGVmYXVsdFByZXZlbnRlZCDliKTmlq3mmK/lkKbosIPnlKjkuoZwcmV2ZW50RGVmYXVsdCDmlrnms5UsIOW5tuS4lOm8oOagh+W3pumUrueCueWHuyggZXZlbnQuYnV0dG9uID09PSAwIClcclxuICAgICAgICogdGFyZ2V0IOS4uiBfc2VsZiDlubbkuJTmsqHmnInmjIkgYWx0IGN0cmwgc2hpZnQgbWV0YemUrlxyXG4gICAgICAgKi9cclxuICAgICAgaWYgKFxyXG4gICAgICAgICFldmVudC5kZWZhdWx0UHJldmVudGVkICYmXHJcbiAgICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmXHJcbiAgICAgICAgKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXHJcbiAgICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudClcclxuICAgICAgKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBuYXZpZ2F0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOWFtuS7luaDheWGteS8mui1sGHmoIfnrb7pu5jorqTnmoRocmVm55qE6Lev55Sx6Lez6L2sXHJcbiAgICB9LFxyXG4gIH07XHJcbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XHJcbiAgICBuZXdQcm9wcy5yZWYgPSByZWZzIHx8IGlubmVyUmVmO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBuZXdQcm9wcy5yZWYgPSBpbm5lclJlZjtcclxuICB9XHJcbiAgcmV0dXJuIDxhIHsuLi5uZXdQcm9wc30gLz47XHJcbn0pO1xyXG5mdW5jdGlvbiBMaW5rQ29tcG9uZW50KHByb3BzLCByZWZzKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgdG8sIC8vIOi3s+i9rOmTvuaOpSDmjqXmlLYgc3RyaW5nIE9iamVjdCBmdW5jdGlvbiDkuInnp43nsbvlnotcclxuICAgIHJlcGxhY2UgPSBmYWxzZSwgLy8g5piv5ZCmcmVwbGFjZeaWueazlVxyXG4gICAgaW5uZXJSZWYsIC8vIHJlZu+8jOS4uuS6hnJlYWN0MTXlj4rku6XkuItcclxuICAgIGNvbXBvbmVudCA9IExpbmtCdXR0b24sIC8vIOe7hOS7tlxyXG4gICAgLi4ub3RoZXJzUHJvcHNcclxuICB9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIChcclxuICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxyXG4gICAgICB7KGNvbnRleHQpID0+IHtcclxuICAgICAgICBjb25zdCB7IGhpc3RvcnksIGxvY2F0aW9uIH0gPSBjb250ZXh0O1xyXG4gICAgICAgIC8vIOeUn+aIkGxvY2F0aW9uXHJcbiAgICAgICAgY29uc3QgbmV3TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbih7XHJcbiAgICAgICAgICBwYXRoOiByZXNvbHZlVG9Mb2NhdGlvbih0bywgbG9jYXRpb24pLFxyXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBsb2NhdGlvbixcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDnlJ/miJBocmVmXHJcbiAgICAgICAgY29uc3QgaHJlZiA9IG5ld0xvY2F0aW9uID8gY3JlYXRlUGF0aChuZXdMb2NhdGlvbikgOiBcIlwiO1xyXG5cclxuICAgICAgICBsZXQgbmV3UHJvcHMgPSB7XHJcbiAgICAgICAgICAuLi5vdGhlcnNQcm9wcyxcclxuICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgICBuYXZpZ2F0ZSgpIHtcclxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XHJcblxyXG4gICAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBSZWFjdCAxNSBjb21wYXRcclxuICAgICAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcclxuICAgICAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZnMgfHwgaW5uZXJSZWY7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5ld1Byb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIG5ld1Byb3BzKTtcclxuICAgICAgfX1cclxuICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cclxuICApO1xyXG59XHJcblxyXG5jb25zdCBMaW5rID0gZm9yd2FyZFJlZihMaW5rQ29tcG9uZW50KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpbms7XHJcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInp5bGlhbmdIaXN0b3J5XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInp5bGlhbmdIaXN0b3J5XCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiZXhwb3J0IGNvbnN0IEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9IFwiYmVmb3JldW5sb2FkXCI7XHJcbmV4cG9ydCBjb25zdCBIYXNoQ2hhbmdlRXZlbnRUeXBlID0gXCJoYXNoY2hhbmdlXCI7XHJcbmV4cG9ydCBjb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcclxuXHJcbi8qKlxyXG4gKiDljoblj7LmoIjkuIrkuIDmrKHmk43kvZznmoTnsbvlnotcclxuICovXHJcbmV4cG9ydCBjb25zdCBhY3Rpb25UeXBlID0ge1xyXG4gIHB1c2g6IFwiUFVTSFwiLCAvLyDmjqjlhaXmoIhcclxuICByZXBsYWNlOiBcIlJFUExBQ0VcIiwgLy8g5pu/5o2i5qCIXHJcbiAgcG9wOiBcIlBPUFwiLCAvLyDliJ3lp4vlgLxcclxufTtcclxuXHJcbi8qKlxyXG4gKiDmlbDmja7nsbvlnovmnprkuL5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbnVtVmFsdWVUeXBlID0ge1xyXG4gIG9iamVjdDogXCJPYmplY3RcIixcclxuICBhcnJheTogXCJBcnJheVwiLFxyXG4gIGJhc2ljOiBcIkJhc2ljXCIsXHJcbn07XHJcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJpbXBvcnQge1xyXG4gIGNyZWF0ZUV2ZW50TGlzdCxcclxuICBzdHJpcFRyYWlsaW5nU2xhc2gsXHJcbiAgYWRkTGVhZGluZ1NsYXNoLFxyXG59IGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xyXG5pbXBvcnQge1xyXG4gIEJlZm9yZVVubG9hZEV2ZW50VHlwZSxcclxuICBIYXNoQ2hhbmdlRXZlbnRUeXBlLFxyXG4gIFBvcFN0YXRlRXZlbnRUeXBlLFxyXG4gIGFjdGlvblR5cGUsXHJcbn0gZnJvbSBcIi4uL2NvbmZpZy9pbmRleFwiO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVBhdGgsXHJcbiAgY3JlYXRlTG9jYXRpb24sXHJcbiAgZ2V0QmFzZUhyZWYsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL0xvY2F0aW9uVXRpbHNcIjtcclxuLyoqXHJcbiAqIOWIm+W7umhpc3Rvcnnot6/nlLFcclxuICogQHBhcmFtIHsqfSBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zID0ge30pIHtcclxuICBjb25zdCB7IHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LCBpc1Nob3dCZWZvcmVVbmxvYWQgPSBmYWxzZSB9ID0gb3B0aW9ucztcclxuXHJcbiAgY29uc3QgYmFzZW5hbWUgPSBvcHRpb25zLmJhc2VuYW1lXHJcbiAgICA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gob3B0aW9ucy5iYXNlbmFtZSkpXHJcbiAgICA6IFwiXCI7XHJcblxyXG4gIC8vIOWFqOWxgGhpc3RvcnlcclxuICBjb25zdCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XHJcblxyXG4gIC8vIOiuoumYheiAhemYn+WIl1xyXG4gIGNvbnN0IGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50TGlzdCh7XHJcbiAgICByZW1vdmVDYWxsYmFjazogcmVtb3ZlUG9wU3RhdGVFdmVudExpc3RlbkZ1bmMsXHJcbiAgfSk7XHJcbiAgLy8g5o+Q56S65LqL5Lu26Zif5YiXXHJcbiAgY29uc3QgYmxvY2tlcnMgPSBjcmVhdGVFdmVudExpc3Qoe1xyXG4gICAgaXNOZWVkUmVzdWx0OiB0cnVlLFxyXG4gICAgcmVtb3ZlQ2FsbGJhY2s6IHJlbW92ZVBvcFN0YXRlRXZlbnRMaXN0ZW5GdW5jLFxyXG4gIH0pO1xyXG5cclxuICBsZXQgYWN0aW9uID0gYWN0aW9uVHlwZS5wb3A7XHJcbiAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oe1xyXG4gICAgcGF0aDogd2luZG93LmxvY2F0aW9uLFxyXG4gICAgYmFzZW5hbWUsXHJcbiAgICBzdGF0ZTogZ2xvYmFsSGlzdG9yeS5zdGF0ZSxcclxuICB9KTtcclxuXHJcbiAgLyoqXHJcbiAgICogUG9wU3RhdGVFdmVudCDnm5HlkKzmlrnms5VcclxuICAgKi9cclxuICBmdW5jdGlvbiBwb3BTdGF0ZUV2ZW50TGlzdGVuRnVuYyhldmVudCkge1xyXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHtcclxuICAgICAgcGF0aDogd2luZG93LmxvY2F0aW9uLFxyXG4gICAgICBiYXNlbmFtZSxcclxuICAgICAgc3RhdGU6IGdsb2JhbEhpc3Rvcnkuc3RhdGUsXHJcbiAgICB9KTtcclxuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxyXG4gICAgLy8g6L+Z6YeM5oSf6KeJ5Y+v5Lul5L2/55SoZXZlbnTkuK3nmoTmlbDmja7vvIzkvYbmmK/ov5nmoLflhpnlj6/ku6Xpgb/lhY3kuI3lkIznjq/looNoYXNo5Lit5pWw5o2u5byC5bi455qE6Zeu6aKYXHJcbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xyXG4gICAgICBoYW5kbGVQb3AobmV4dExvY2F0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZVBvcFN0YXRlRXZlbnRMaXN0ZW5GdW5jKCkge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIHBvcFN0YXRlRXZlbnRMaXN0ZW5GdW5jKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruebkeWQrCzlj6rmnInlho1nbyxiYWNrLGZvcndhcmTkuInnp43mg4XlhrXkuIvkvJrop6blj5FcclxuICAgKi9cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgcG9wU3RhdGVFdmVudExpc3RlbkZ1bmMpO1xyXG5cclxuICBsZXQgYmxvY2tlZFBvcFR4ID0gbnVsbDtcclxuICAvKipcclxuICAgKiBoYXNo5pS55Y+Y5Ye65Y+R5LqL5Lu2XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gaGFuZGxlUG9wKG5leHRMb2NhdGlvbikge1xyXG4gICAgaWYgKGJsb2NrZWRQb3BUeCkge1xyXG4gICAgICBibG9ja2VkUG9wVHggPSBmYWxzZTtcclxuICAgICAgY29uc29sZS5sb2coXCJibG9ja2VkUG9wVHhcIiwgYmxvY2tlZFBvcFR4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG5leHRBY3Rpb24gPSBhY3Rpb25UeXBlLnBvcDtcclxuICAgICAgY29uc3Qgc2VuZERhdGEgPSB7XHJcbiAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxyXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGgpIHtcclxuICAgICAgICBsZXQgaXNPayA9IGJsb2NrZXJzLmNhbGwoc2VuZERhdGEpO1xyXG4gICAgICAgIGlmICghaXNPaykge1xyXG4gICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gbG9jYXRpb24uc3RhdGUuaW5kZXggLSBuZXh0TG9jYXRpb24uc3RhdGUuaW5kZXg7XHJcbiAgICAgICAgICAvLyBibG9ja2VkUG9wVHggPSB0cnVlO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJpc05vdE9rXCIsIGJsb2NrZWRQb3BUeCwgbG9jYXRpb24sIG5leHRMb2NhdGlvbik7XHJcbiAgICAgICAgICBnbyhsYXN0SW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbiwgbmV4dExvY2F0aW9uKTtcclxuICAgICAgICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcHBseVRvKHNlbmREYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ6ZO+5o6lXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XHJcbiAgICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZVBhdGgoXHJcbiAgICAgICAgY3JlYXRlTG9jYXRpb24oe1xyXG4gICAgICAgICAgcGF0aCxcclxuICAgICAgICAgIGJhc2VuYW1lLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKblhYHorrjot7PovaxcclxuICAgKi9cclxuICBmdW5jdGlvbiBhbGxvd1RvKHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGFjdGlvbiwgbG9jYXRpb24gfSA9IHByb3BzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gIWJsb2NrZXJzLmxlbmd0aCB8fCBibG9ja2Vycy5jYWxsKHsgYWN0aW9uLCBsb2NhdGlvbiB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhYHorrjot7PovaxcclxuICAgKi9cclxuICBmdW5jdGlvbiBhcHBseVRvKHByb3BzKSB7XHJcbiAgICBhY3Rpb24gPSBwcm9wcy5hY3Rpb247XHJcbiAgICBsb2NhdGlvbiA9IHByb3BzLmxvY2F0aW9uO1xyXG4gICAgbGlzdGVuZXJzLmNhbGwoeyBhY3Rpb24sIGxvY2F0aW9uIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5re75Yqg6Lev55SxXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xyXG4gICAgY29uc3QgbmV3QWN0aW9uID0gYWN0aW9uVHlwZS5wdXNoO1xyXG4gICAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICBpbmRleDogbG9jYXRpb24uc3RhdGUgJiYgbG9jYXRpb24uc3RhdGUuaW5kZXggKyAxLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBuZXdMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHtcclxuICAgICAgcGF0aCxcclxuICAgICAgc3RhdGU6IG5ld1N0YXRlLFxyXG4gICAgICBiYXNlbmFtZSxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2VuZERhdGEgPSB7XHJcbiAgICAgIGFjdGlvbjogbmV3QWN0aW9uLFxyXG4gICAgICBsb2NhdGlvbjogbmV3TG9jYXRpb24sXHJcbiAgICB9O1xyXG4gICAgaWYgKGFsbG93VG8oc2VuZERhdGEpKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gZ2V0QmFzZUhyZWYoKSArIGJhc2VuYW1lICsgY3JlYXRlUGF0aChuZXdMb2NhdGlvbik7XHJcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUobmV3U3RhdGUsIFwiXCIsIHVybCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGFwcGx5VG8oc2VuZERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu/5o2iXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xyXG4gICAgY29uc3QgbmV3QWN0aW9uID0gYWN0aW9uVHlwZS5wdXNoO1xyXG4gICAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICBpbmRleDogbG9jYXRpb24uc3RhdGUgJiYgbG9jYXRpb24uc3RhdGUuaW5kZXgsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG5ld0xvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oeyBwYXRoLCBzdGF0ZTogbmV3U3RhdGUsIGJhc2VuYW1lIH0pO1xyXG4gICAgY29uc3Qgc2VuZERhdGEgPSB7XHJcbiAgICAgIGFjdGlvbjogbmV3QWN0aW9uLFxyXG4gICAgICBsb2NhdGlvbjogbmV3TG9jYXRpb24sXHJcbiAgICB9O1xyXG4gICAgaWYgKGFsbG93VG8oc2VuZERhdGEpKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gZ2V0QmFzZUhyZWYoKSArIGJhc2VuYW1lICsgY3JlYXRlUGF0aChuZXdMb2NhdGlvbik7XHJcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUobmV3U3RhdGUsIFwiXCIsIHVybCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGFwcGx5VG8oc2VuZERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Lez6L2sXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZ28oaW5kZXgpIHtcclxuICAgIGdsb2JhbEhpc3RvcnkuZ28oaW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Zue6YCAXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYmFjaygpIHtcclxuICAgIGdvKC0xKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWJjei/m1xyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGZvcndhcmQoKSB7XHJcbiAgICBnbygxKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjOiuoumYheiAhVxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XHJcbiAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i5Yi35paw5YmN55qE5aSE55CG5pON5L2cXHJcbiAgICog5Y+q5pyJaGlzdG9yeS5iYWNrKCkg5ZKMIGhpc3RvcnkuZm9yd2FyZCgp5Lya6Kem5Y+RRlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHByb21wdEJlZm9yZVVubG9hZChldmVudCkge1xyXG4gICAgaWYgKCFpc1Nob3dCZWZvcmVVbmxvYWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gQ2FuY2VsIHRoZSBldmVudCBhcyBzdGF0ZWQgYnkgdGhlIHN0YW5kYXJkLlxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIC8vIENocm9tZSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXHJcbiAgICBldmVudC5yZXR1cm5WYWx1ZSA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5DnpLpcclxuICAgKi9cclxuICBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XHJcbiAgICBsZXQgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XHJcbiAgICBpZiAoYmxvY2tlcnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEJlZm9yZVVubG9hZEV2ZW50VHlwZSwgcHJvbXB0QmVmb3JlVW5sb2FkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICB1bmJsb2NrKCk7XHJcbiAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgbGV0IGhpc3RvcnkgPSB7XHJcbiAgICBnZXQgYWN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gYWN0aW9uO1xyXG4gICAgfSxcclxuICAgIGdldCBsb2NhdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZUhyZWYsXHJcbiAgICBwdXNoLFxyXG4gICAgcmVwbGFjZSxcclxuICAgIGdvLFxyXG4gICAgYmFjayxcclxuICAgIGZvcndhcmQsXHJcbiAgICBsaXN0ZW4sXHJcbiAgICBibG9jayxcclxuICB9O1xyXG5cclxuICByZXR1cm4gaGlzdG9yeTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNyZWF0ZUV2ZW50TGlzdCxcclxuICBzdHJpcFRyYWlsaW5nU2xhc2gsXHJcbiAgYWRkTGVhZGluZ1NsYXNoLFxyXG59IGZyb20gXCIuLi91dGlscy9pbmRleFwiO1xyXG5pbXBvcnQge1xyXG4gIEJlZm9yZVVubG9hZEV2ZW50VHlwZSxcclxuICBIYXNoQ2hhbmdlRXZlbnRUeXBlLFxyXG4gIFBvcFN0YXRlRXZlbnRUeXBlLFxyXG4gIGFjdGlvblR5cGUsXHJcbn0gZnJvbSBcIi4uL2NvbmZpZy9pbmRleFwiO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVBhdGgsXHJcbiAgY3JlYXRlTG9jYXRpb24sXHJcbiAgZ2V0QmFzZUhyZWYsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL0xvY2F0aW9uVXRpbHNcIjtcclxuLyoqXHJcbiAqIOWIm+W7umhpc3Rvcnnot6/nlLFcclxuICogQHBhcmFtIHsqfSBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zID0ge30pIHtcclxuICBjb25zdCB7IHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LCBpc1Nob3dCZWZvcmVVbmxvYWQgPSBmYWxzZSB9ID0gb3B0aW9ucztcclxuXHJcbiAgY29uc3QgYmFzZW5hbWUgPSBvcHRpb25zLmJhc2VuYW1lXHJcbiAgICA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gob3B0aW9ucy5iYXNlbmFtZSkpXHJcbiAgICA6IFwiXCI7XHJcblxyXG4gIC8vIOWFqOWxgGhpc3RvcnlcclxuICBjb25zdCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XHJcblxyXG4gIC8vIOiuoumYheiAhemYn+WIl1xyXG4gIGNvbnN0IGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50TGlzdCh7XHJcbiAgICByZW1vdmVDYWxsYmFjazogcmVtb3ZlSGFzaENoYW5nZUV2ZW50TGlzdGVuRnVuYyxcclxuICB9KTtcclxuICAvLyDmj5DnpLrkuovku7bpmJ/liJdcclxuICBjb25zdCBibG9ja2VycyA9IGNyZWF0ZUV2ZW50TGlzdCh7XHJcbiAgICBpc05lZWRSZXN1bHQ6IHRydWUsXHJcbiAgICByZW1vdmVDYWxsYmFjazogcmVtb3ZlSGFzaENoYW5nZUV2ZW50TGlzdGVuRnVuYyxcclxuICB9KTtcclxuXHJcbiAgbGV0IGFjdGlvbiA9IGFjdGlvblR5cGUucG9wO1xyXG4gIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHtcclxuICAgIHBhdGg6IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSxcclxuICAgIGJhc2VuYW1lLFxyXG4gICAgc3RhdGU6IGdsb2JhbEhpc3Rvcnkuc3RhdGUsXHJcbiAgfSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIGhhc2hDaGFuZ2VFdmVudCDnm5HlkKzmlrnms5VcclxuICAgKi9cclxuICBmdW5jdGlvbiBoYXNoQ2hhbmdlRXZlbnRMaXN0ZW5GdW5jKGV2ZW50KSB7XHJcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oe1xyXG4gICAgICBwYXRoOiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksXHJcbiAgICAgIGJhc2VuYW1lLFxyXG4gICAgICBzdGF0ZTogZ2xvYmFsSGlzdG9yeS5zdGF0ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxyXG4gICAgLy8g6L+Z6YeM5oSf6KeJ5Y+v5Lul5L2/55SoZXZlbnTkuK3nmoTmlbDmja7vvIzkvYbmmK/ov5nmoLflhpnlj6/ku6Xpgb/lhY3kuI3lkIznjq/looNoYXNo5Lit5pWw5o2u5byC5bi455qE6Zeu6aKYXHJcbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xyXG4gICAgICBoYW5kbGVQb3AobmV4dExvY2F0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUhhc2hDaGFuZ2VFdmVudExpc3RlbkZ1bmMoKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnRUeXBlLCBoYXNoQ2hhbmdlRXZlbnRMaXN0ZW5GdW5jKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruebkeWQrCzlj6rmnInlho1nbyxiYWNrLGZvcndhcmTkuInnp43mg4XlhrXkuIvkvJrop6blj5FcclxuICAgKi9cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnRUeXBlLCBoYXNoQ2hhbmdlRXZlbnRMaXN0ZW5GdW5jKTtcclxuXHJcbiAgbGV0IGJsb2NrZWRQb3BUeCA9IG51bGw7XHJcbiAgLyoqXHJcbiAgICogaGFzaOaUueWPmOWHuuWPkeS6i+S7tlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChuZXh0TG9jYXRpb24pIHtcclxuICAgIGlmIChibG9ja2VkUG9wVHgpIHtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG5leHRBY3Rpb24gPSBhY3Rpb25UeXBlLnBvcDtcclxuICAgICAgY29uc3Qgc2VuZERhdGEgPSB7XHJcbiAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxyXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGgpIHtcclxuICAgICAgICBsZXQgaXNPayA9IGJsb2NrZXJzLmNhbGwoc2VuZERhdGEpO1xyXG4gICAgICAgIGlmICghaXNPaykge1xyXG4gICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gbG9jYXRpb24uc3RhdGUuaW5kZXggLSBuZXh0TG9jYXRpb24uc3RhdGUuaW5kZXg7XHJcbiAgICAgICAgICBnbyhsYXN0SW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2NhdGlvbiA9IG5leHRMb2NhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBwbHlUbyhzZW5kRGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+aIkOmTvuaOpVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xyXG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVQYXRoKFxyXG4gICAgICAgIGNyZWF0ZUxvY2F0aW9uKHtcclxuICAgICAgICAgIHBhdGgsXHJcbiAgICAgICAgICBiYXNlbmFtZSxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5YWB6K646Lez6L2sXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYWxsb3dUbyhwcm9wcykge1xyXG4gICAgY29uc3QgeyBhY3Rpb24sIGxvY2F0aW9uIH0gPSBwcm9wcztcclxuICAgIHJldHVybiAhYmxvY2tlcnMubGVuZ3RoIHx8IGJsb2NrZXJzLmNhbGwoeyBhY3Rpb24sIGxvY2F0aW9uIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YWB6K646Lez6L2sXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYXBwbHlUbyhwcm9wcykge1xyXG4gICAgYWN0aW9uID0gcHJvcHMuYWN0aW9uO1xyXG4gICAgbG9jYXRpb24gPSBwcm9wcy5sb2NhdGlvbjtcclxuICAgIGxpc3RlbmVycy5jYWxsKHsgYWN0aW9uLCBsb2NhdGlvbiB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOi3r+eUsVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcclxuICAgIGNvbnN0IG5ld0FjdGlvbiA9IGFjdGlvblR5cGUucHVzaDtcclxuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcclxuICAgICAgaW5kZXg6IGxvY2F0aW9uLnN0YXRlICYmIGxvY2F0aW9uLnN0YXRlLmluZGV4ICsgMSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgbmV3TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbih7XHJcbiAgICAgIHBhdGgsXHJcbiAgICAgIHN0YXRlOiBuZXdTdGF0ZSxcclxuICAgICAgYmFzZW5hbWUsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNlbmREYXRhID0ge1xyXG4gICAgICBhY3Rpb246IG5ld0FjdGlvbixcclxuICAgICAgbG9jYXRpb246IG5ld0xvY2F0aW9uLFxyXG4gICAgfTtcclxuICAgIGlmIChhbGxvd1RvKHNlbmREYXRhKSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGdldEJhc2VIcmVmKCkgKyBcIiNcIiArIGJhc2VuYW1lICsgY3JlYXRlUGF0aChuZXdMb2NhdGlvbik7XHJcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUobmV3U3RhdGUsIFwiXCIsIHVybCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGFwcGx5VG8oc2VuZERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu/5o2iXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xyXG4gICAgY29uc3QgbmV3QWN0aW9uID0gYWN0aW9uVHlwZS5wdXNoO1xyXG4gICAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICBpbmRleDogbG9jYXRpb24uc3RhdGUgJiYgbG9jYXRpb24uc3RhdGUuaW5kZXgsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG5ld0xvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oeyBwYXRoLCBzdGF0ZTogbmV3U3RhdGUsIGJhc2VuYW1lIH0pO1xyXG4gICAgY29uc3Qgc2VuZERhdGEgPSB7XHJcbiAgICAgIGFjdGlvbjogbmV3QWN0aW9uLFxyXG4gICAgICBsb2NhdGlvbjogbmV3TG9jYXRpb24sXHJcbiAgICB9O1xyXG4gICAgaWYgKGFsbG93VG8oc2VuZERhdGEpKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gZ2V0QmFzZUhyZWYoKSArIFwiI1wiICsgYmFzZW5hbWUgKyBjcmVhdGVQYXRoKG5ld0xvY2F0aW9uKTtcclxuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShuZXdTdGF0ZSwgXCJcIiwgdXJsKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgICAgYXBwbHlUbyhzZW5kRGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDot7PovaxcclxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcclxuICAgKi9cclxuICBmdW5jdGlvbiBnbyhpbmRleCkge1xyXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhpbmRleCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlm57pgIBcclxuICAgKi9cclxuICBmdW5jdGlvbiBiYWNrKCkge1xyXG4gICAgZ28oLTEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YmN6L+bXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZm9yd2FyZCgpIHtcclxuICAgIGdvKDEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaM6K6i6ZiF6ICFXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICAgKi9cclxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcclxuICAgIHJldHVybiBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLliLfmlrDliY3nmoTlpITnkIbmk43kvZxcclxuICAgKiDlj6rmnIloaXN0b3J5LmJhY2soKSDlkowgaGlzdG9yeS5mb3J3YXJkKCnkvJrop6blj5FGXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcHJvbXB0QmVmb3JlVW5sb2FkKGV2ZW50KSB7XHJcbiAgICBpZiAoIWlzU2hvd0JlZm9yZVVubG9hZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBDYW5jZWwgdGhlIGV2ZW50IGFzIHN0YXRlZCBieSB0aGUgc3RhbmRhcmQuXHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgLy8gQ2hyb21lIHJlcXVpcmVzIHJldHVyblZhbHVlIHRvIGJlIHNldC5cclxuICAgIGV2ZW50LnJldHVyblZhbHVlID0gXCJcIjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPkOekulxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcclxuICAgIGxldCB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcclxuICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHVuYmxvY2soKTtcclxuICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBsZXQgaGlzdG9yeSA9IHtcclxuICAgIGdldCBhY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBhY3Rpb247XHJcbiAgICB9LFxyXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlSHJlZixcclxuICAgIHB1c2gsXHJcbiAgICByZXBsYWNlLFxyXG4gICAgZ28sXHJcbiAgICBiYWNrLFxyXG4gICAgZm9yd2FyZCxcclxuICAgIGxpc3RlbixcclxuICAgIGJsb2NrLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiBoaXN0b3J5O1xyXG59XHJcbiIsImltcG9ydCB7IGdldFVuaXF1ZUtleSwgdmFsdWVFcXVhbCB9IGZyb20gXCIuL2luZGV4XCI7XHJcbmltcG9ydCByZXNvbHZlUGF0aE5hbWUgZnJvbSBcInJlc29sdmUtcGF0aG5hbWVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXJhbXMgPSB7fSkge1xyXG4gIGNvbnN0IHtcclxuICAgIHBhdGgsIC8vIOWcsOWdgFxyXG4gICAgYmFzZW5hbWUsIC8vXHJcbiAgICBrZXkgPSBnZXRVbmlxdWVLZXkoKSwgLy8g5ZSv5LiA5YC8XHJcbiAgICBzdGF0ZSA9IHtcclxuICAgICAgaW5kZXg6IDAsXHJcbiAgICB9LCAvLyDnirbmgIHlj4LmlbBcclxuICAgIGN1cnJlbnRMb2NhdGlvbiwgLy8g5b2T5YmNbG9jYXRpb25cclxuICB9ID0gcGFyYW1zO1xyXG4gIGNvbnN0IGJhc2VQYXRoSW5mbyA9IHBhcnNlUGF0aChwYXRoLCBiYXNlbmFtZSwgY3VycmVudExvY2F0aW9uKTtcclxuICByZXR1cm4ge1xyXG4gICAgLi4uYmFzZVBhdGhJbmZvLFxyXG4gICAga2V5LFxyXG4gICAgc3RhdGUsXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOino+aekOi3r+W+hFxyXG4gKiBAcGFyYW0geyp9fSBwYXRoXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgsIGJhc2VuYW1lLCBjdXJyZW50TG9jYXRpb24pIHtcclxuICBsZXQgbG9jYXRpb25SZXN1bHQgPSB7XHJcbiAgICBwYXRobmFtZTogXCIvXCIsXHJcbiAgICBzZWFyY2g6IFwiXCIsXHJcbiAgICBoYXNoOiBcIlwiLFxyXG4gIH07XHJcblxyXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUgPSBwYXRoIHx8IFwiL1wiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2NhdGlvblJlc3VsdCA9IE9iamVjdC5hc3NpZ24obG9jYXRpb25SZXN1bHQsIHsgLi4ucGF0aCB9KTtcclxuICB9XHJcblxyXG4gIC8vIOWFiOi/h+a7pGhhc2jlgLzvvIznhLblkI7lho3ov4fmu6RzZWFyY2jnmoTlhoXlrrlcclxuXHJcbiAgY29uc3QgaGFzaEluZGV4ID0gbG9jYXRpb25SZXN1bHQucGF0aG5hbWUuaW5kZXhPZihcIiNcIik7XHJcbiAgLy8g5a2Y5ZyoaGFzaOWAvFxyXG4gIGlmIChoYXNoSW5kZXggPiAtMSkge1xyXG4gICAgLy8gaGFzaOWAvFxyXG4gICAgbG9jYXRpb25SZXN1bHQuaGFzaCA9IGxvY2F0aW9uUmVzdWx0LnBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xyXG4gICAgLy8gcGF0aG5hbWUg5YC8XHJcbiAgICBsb2NhdGlvblJlc3VsdC5wYXRobmFtZSA9IGxvY2F0aW9uUmVzdWx0LnBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VhcmNoSW5kZXggPSBsb2NhdGlvblJlc3VsdC5wYXRobmFtZS5pbmRleE9mKFwiP1wiKTtcclxuICBpZiAoc2VhcmNoSW5kZXggPiAtMSkge1xyXG4gICAgLy8gc2VhcmNoIOWAvFxyXG4gICAgbG9jYXRpb25SZXN1bHQuc2VhcmNoID0gbG9jYXRpb25SZXN1bHQucGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcclxuICAgIC8vIHBhdGhuYW1lIOWAvFxyXG4gICAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUgPSBsb2NhdGlvblJlc3VsdC5wYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xyXG4gIH1cclxuXHJcbiAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uUmVzdWx0LnBhdGhuYW1lLCBiYXNlbmFtZSk7XHJcblxyXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcclxuICAgIGlmICghbG9jYXRpb25SZXN1bHQucGF0aG5hbWUpIHtcclxuICAgICAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XHJcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uUmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gXCIvXCIpIHtcclxuICAgICAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUoXHJcbiAgICAgICAgbG9jYXRpb25SZXN1bHQucGF0aG5hbWUsXHJcbiAgICAgICAgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xyXG4gICAgaWYgKCFsb2NhdGlvblJlc3VsdC5wYXRobmFtZSkge1xyXG4gICAgICBsb2NhdGlvblJlc3VsdC5wYXRobmFtZSA9IFwiL1wiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHBhdGhuYW1lOiBsb2NhdGlvblJlc3VsdC5wYXRobmFtZSxcclxuICAgIHNlYXJjaDogbG9jYXRpb25SZXN1bHQuc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBsb2NhdGlvblJlc3VsdC5zZWFyY2gsXHJcbiAgICBoYXNoOiBsb2NhdGlvblJlc3VsdC5oYXNoID09PSBcIiNcIiA/IFwiXCIgOiBsb2NhdGlvblJlc3VsdC5oYXNoLFxyXG4gIH07XHJcbn1cclxuXHJcbi8vIOWIm+W7unBhdGhcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24gPSB7fSkge1xyXG4gIGNvbnN0IHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9ID0gbG9jYXRpb247XHJcblxyXG4gIGxldCBwYXRoID0gcGF0aG5hbWUgfHwgXCIvXCI7XHJcblxyXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIilcclxuICAgIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBgPyR7c2VhcmNofWA7XHJcblxyXG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBgIyR7aGFzaH1gO1xyXG5cclxuICByZXR1cm4gcGF0aDtcclxufVxyXG5cclxuLy8g5piv5ZCm5YyF5ZCrYmFzZW5hbWVcclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGggPSBcIlwiLCBwcmVmaXggPSBcIlwiKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJlxyXG4gICAgXCIvPyNcIi5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTFcclxuICApO1xyXG59XHJcblxyXG4vLyDljrvpmaRiYXNlbmFtZVxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoID0gXCJcIiwgcHJlZml4ID0gXCJcIikge1xyXG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xyXG59XHJcblxyXG4vKipcclxuICog6I635Y+WYmFzZW5hbWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcclxuICBsZXQgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xyXG4gIGxldCBocmVmID0gXCJcIjtcclxuXHJcbiAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XHJcbiAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICBsZXQgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xyXG4gICAgaHJlZiA9IGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBocmVmO1xyXG59XHJcblxyXG4vKipcclxuICogbG9jYXRpb24g5q+U6L6DXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xyXG4gIHJldHVybiAoXHJcbiAgICBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmXHJcbiAgICBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiZcclxuICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXHJcbiAgICBhLmtleSA9PT0gYi5rZXkgJiZcclxuICAgIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSlcclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7IGVudW1WYWx1ZVR5cGUgfSBmcm9tIFwiLi4vY29uZmlnL2luZGV4XCI7XHJcbi8qKlxyXG4gKiDliJvlu7rkuovku7bpmJ/liJdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFdmVudExpc3Qob3B0aW9ucyA9IHt9KSB7XHJcbiAgY29uc3QgeyBpc05lZWRSZXN1bHQgPSBmYWxzZSwgcmVtb3ZlQ2FsbGJhY2sgfSA9IG9wdGlvbnM7XHJcbiAgbGV0IGxpc3QgPSBbXTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgIHJldHVybiBsaXN0Lmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICBwdXNoKGZuKSB7XHJcbiAgICAgIGxpc3QucHVzaChmbik7XHJcbiAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3QuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBmbik7XHJcbiAgICAgICAgaWYgKCFsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgcmVtb3ZlQ2FsbGJhY2sgJiYgcmVtb3ZlQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgY2FsbChhcmcpIHtcclxuICAgICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZm4gPSBsaXN0W2ldO1xyXG4gICAgICAgIHJlc3VsdCA9IGZuICYmIGZuKGFyZyk7XHJcbiAgICAgICAgaWYgKGlzTmVlZFJlc3VsdCAmJiAhcmVzdWx0KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPluWUr+S4gGtleVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXF1ZUtleShiYXNlRGF0YSA9IFwiXCIpIHtcclxuICBjb25zdCB0aW1lU3RyID0gRGF0ZS5ub3coKS50b1N0cmluZygzMik7XHJcbiAgbGV0IGtleSA9IHRpbWVTdHIgKyBiYXNlRGF0YS50b1N0cmluZygpO1xyXG4gIGxldCBuZXdLZXkgPSBbXTtcclxuICBsZXQgdmVyaWZpY2F0aW9uRGF0YSA9IDE7IC8vIOagoemqjOeggeS9jee9rlxyXG4gIGxldCBuZXdLZXlJbmRleCA9IDA7XHJcbiAgLy8g6YeH55So5rW35Lym5qCh6aqM56CB5Y6f55CG5aSE55CGXHJcbiAgZm9yIChsZXQgaiA9IDEsIGxlbiA9IGtleS5sZW5ndGg7IGogPD0gbGVuOyBqKyspIHtcclxuICAgIGlmIChqID09PSB2ZXJpZmljYXRpb25EYXRhKSB7XHJcbiAgICAgIG5ld0tleVtuZXdLZXlJbmRleF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxyXG4gICAgICAgIDY1ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxNilcclxuICAgICAgKTtcclxuICAgICAgbmV3S2V5SW5kZXgrKztcclxuICAgICAgdmVyaWZpY2F0aW9uRGF0YSA9IDIgKiB2ZXJpZmljYXRpb25EYXRhO1xyXG4gICAgfVxyXG4gICAgbmV3S2V5W25ld0tleUluZGV4XSA9IGtleVtqIC0gMV07XHJcbiAgICBuZXdLZXlJbmRleCsrO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ld0tleS5qb2luKFwiXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIG9iaiAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDojrflj5bmlbDmja7nsbvlnotcclxuICog6L+Z6YeM5Y+q6ICD6JmR5Z+65pys5pWw5o2u57G75Z6L77yMc3ltYm9s562J5LiN5Zyo6ICD6JmR6IyD55W05YaFXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVUeXBlKHZhbCkge1xyXG4gIGxldCB0eXBlID0gZW51bVZhbHVlVHlwZS5iYXNpYztcclxuICBpZiAoaXNPYmplY3QodmFsKSkge1xyXG4gICAgdHlwZSA9IGVudW1WYWx1ZVR5cGUub2JqZWN0O1xyXG4gIH1cclxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XHJcbiAgICB0eXBlID0gZW51bVZhbHVlVHlwZS5hcnJheTtcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIOavlOi+g+S4pOS4quWAvOaYr+WQpuebuOetiVxyXG4gKiBAcGFyYW0geyp9IEFcclxuICogQHBhcmFtIHsqfSBCXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVFcXVhbCh2YWx1ZUEsIHZhbHVlQikge1xyXG4gIGNvbnN0IHZhbHVlQVR5cGUgPSBnZXRWYWx1ZVR5cGUodmFsdWVBKTtcclxuICBjb25zdCB2YWx1ZUJUeXBlID0gZ2V0VmFsdWVUeXBlKHZhbHVlQik7XHJcblxyXG4gIC8vIOexu+Wei+S4jeebuOetieeahOiCr+WumuS4jeS4gOagt1xyXG4gIGlmICh2YWx1ZUFUeXBlICE9PSB2YWx1ZUJUeXBlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyDln7rnoYDnsbvlnovnm7TmjqXlhajnrYnliKTmlq1cclxuICBpZiAodmFsdWVBVHlwZSA9PT0gZW51bVZhbHVlVHlwZS5iYXNpYykge1xyXG4gICAgcmV0dXJuIHZhbHVlQSA9PT0gdmFsdWVCO1xyXG4gIH1cclxuXHJcbiAgLy8g5a+56LGh55qE6YCS5b2S6LCD55SoXHJcbiAgaWYgKHZhbHVlQVR5cGUgPT09IGVudW1WYWx1ZVR5cGUub2JqZWN0KSB7XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWVBKTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XHJcbiAgICAgIGNvbnN0IGlzRXF1YWwgPSB2YWx1ZUVxdWFsKHZhbHVlQVtrZXldLCB2YWx1ZUJba2V5XSk7XHJcbiAgICAgIGlmICghaXNFcXVhbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyDmlbDnu4TlhYjliKTmlq3plb/luqbvvIznhLblkI7lho3liKTmlq3mr4/kuIDkuKrlgLxcclxuICBpZiAodmFsdWVBVHlwZSA9PT0gZW51bVZhbHVlVHlwZS5hcnJheSkge1xyXG4gICAgaWYgKHZhbHVlQS5sZW5ndGggPT09IHZhbHVlQi5sZW5ndGgpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbHVlQS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGlzRXF1YWwgPSB2YWx1ZUVxdWFsKHZhbHVlQVtpXSwgdmFsdWVCW2ldKTtcclxuICAgICAgICBpZiAoIWlzRXF1YWwpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZWk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8vIOa3u+WKoOmmlumDqOeahCAvXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xyXG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xyXG59XHJcbi8vIOWOu+mZpOmmlumDqOeahCAvXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XHJcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcclxufVxyXG4vLyDljrvpmaTlsL7pg6jnmoQgL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcclxuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gXCIvXCIgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIOivjeazleWIhuaekOexu+Wei1xyXG5jb25zdCB0b2tlbnNUeXBlID0ge1xyXG4gIG5hbWU6IFwiTkFNRVwiLCAvLyDlkI3np7BcclxuICBjaGFyOiBcIkNIQVJcIiwgLy8g5a2X56ymXHJcbiAgb3BlbjogXCJPUEVOXCIsIC8vIOW8gFxyXG4gIGNsb3NlOiBcIkNMT1NFXCIsIC8vIOWFs1xyXG4gIGVzY2FwZWRDaGFyOiBcIkVTQ0FQRURfQ0hBUlwiLCAvLyDliIblibLnrKZcclxuICBtb2RpZmllcjogXCJNT0RJRklFUlwiLCAvLyDkv67ppbDnrKZcclxuICBwYXR0ZXJuOiBcIlBBVFRFUk5cIiwgLy8g6IyD5byPIOaYr+eUqOadpeaPj+i/sG5hbWXnmoRcclxuICBlbmQ6IFwiRU5EXCIsIC8vIOe7k+adn1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOaLhuWIhnN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cikge1xyXG4gIC8vIOWwhumdniAhIDogJCB7IH0gKCApIFsgXSAvIFxcIOeahOmDveaMieeFp+i9rOS5ieWtl+espuWkhOeQhizlrp7pmYXkuIrnnIvotbfmnaXlsLHmmK/lsIbpgJrnlKjnmoTmraPliJnooajovr7lvI/kuK3kuI3mmK/mlbDmja7lpITnkIbnmoTmlbDmja7lhajpg6jliZTpmaRcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOivjeazleWIhuaekFxyXG4gKiDlrp7pmYXkuIrmmK/liIbor40s5Y+q5LiN6L+H6L+Z5LiA5q2l55qE5YiG6K+N5Li76KaB5piv5aSE55CGIOiMg+W8jyhwYXR0ZXJuKSDlkowg5a2X5q615ZCN56ewKG5hbWUpIOi/meS4pOenjeexu+Weiyzlhbbku5bnmoTmg4XlhrXpg73nroDljZXlpITnkIYs5q+P5LiqY2hhcumDveWPr+S7peWNleeLrOWxleekulxyXG4gKiBAcGFyYW0ge0FycmF5fSBzdHJcclxuICovXHJcbmZ1bmN0aW9uIGxleGVyKHN0cikge1xyXG4gIGxldCB0b2tlbnMgPSBbXTtcclxuICBsZXQgaSA9IDA7XHJcbiAgY29uc3Qgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcclxuICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xyXG4gICAgY29uc3QgY2hhciA9IHN0cltpXTtcclxuXHJcbiAgICAvLyDlpITnkIbkv67ppbDnrKZcclxuICAgIGlmIChjaGFyID09PSBcIipcIiB8fCBjaGFyID09PSBcIitcIiB8fCBjaGFyID09PSBcIj9cIikge1xyXG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUubW9kaWZpZXIsIGluZGV4OiBpLCB2YWx1ZTogY2hhciB9KTtcclxuICAgICAgaSsrO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIC8vIOWkhOeQhuWIhuWJsuesplxyXG4gICAgaWYgKGNoYXIgPT09IFwiXFxcXFwiKSB7XHJcbiAgICAgIC8vIFRPRE8g6L+Z6YeM5ZKM5rqQ56CB5a6e546w5LiN5LiA5qC377yM5rqQ56CB5Lit5bqU6K+l5piv5bCG5aSa6L+H5LqG5LiA5Liq5a2X56ym5LiyXHJcbiAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogdG9rZW5zVHlwZS5lc2NhcGVkQ2hhciwgaW5kZXg6IGksIHZhbHVlOiBjaGFyIH0pO1xyXG4gICAgICBpKys7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgLy8g5aSE55CG5byA5qCH562+IHtcclxuICAgIGlmIChjaGFyID09PSBcIntcIikge1xyXG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUub3BlbiwgaW5kZXg6IGksIHZhbHVlOiBjaGFyIH0pO1xyXG4gICAgICBpKys7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgLy8g5aSE55CG6Zet5qCH562+IH1cclxuICAgIGlmIChjaGFyID09PSBcIn1cIikge1xyXG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUuY2xvc2UsIGluZGV4OiBpLCB2YWx1ZTogY2hhciB9KTtcclxuICAgICAgaSsrO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpITnkIblrprkuYnnmoTpmo/mnLrnsbvlnotuYW1lXHJcbiAgICBpZiAoY2hhciA9PT0gXCI6XCIpIHtcclxuICAgICAgbGV0IG5hbWUgPSBcIlwiO1xyXG4gICAgICBsZXQgaiA9IGkgKyAxO1xyXG4gICAgICAvLyDlj5jph4/lj6rog73mmK8wLTkgYS16IEEtWiBfKOS4i+a7kee6vyks6L+Z5ZKM5b6I5aSa55qE57yW56iL6K+t6KiA5Lit5Y+Y6YeP55qE5a6a5LmJ5piv5LiA6Ie055qEXHJcbiAgICAgIHdoaWxlIChqIDwgc3RyTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGopO1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAvLyBgMC05YFxyXG4gICAgICAgICAgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykgfHxcclxuICAgICAgICAgIC8vIGBBLVpgXHJcbiAgICAgICAgICAoY29kZSA+PSA2NSAmJiBjb2RlIDw9IDkwKSB8fFxyXG4gICAgICAgICAgLy8gYGEtemBcclxuICAgICAgICAgIChjb2RlID49IDk3ICYmIGNvZGUgPD0gMTIyKSB8fFxyXG4gICAgICAgICAgLy8gYF9gXHJcbiAgICAgICAgICBjb2RlID09PSA5NVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgbmFtZSArPSBzdHJbaisrXTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgLy8g5aaC5p6c5ZCN56ew5LiN5a2Y5ZyoLOWImeaPkOekuuexu+Wei+mUmeivr1xyXG4gICAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pc3NpbmcgcGFyYW1ldGVyIG5hbWUgYXQgJHtpfWApO1xyXG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUubmFtZSwgaW5kZXg6IGksIHZhbHVlOiBuYW1lIH0pO1xyXG4gICAgICAvLyDot6jlm73kuK3pl7TnmoTlgLws55u05o6l5YiwbmFtZeS5i+WQjlxyXG4gICAgICBpID0gajtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5aSE55CGcGF0dGVybuiMg+W8j+eahOaDheWGtVxyXG4gICAgaWYgKGNoYXIgPT09IFwiKFwiKSB7XHJcbiAgICAgIGxldCBqID0gaSArIDE7XHJcbiAgICAgIGxldCBwYXR0ZXJuID0gXCJcIjtcclxuICAgICAgLy8g55So5p2l5Yik5pat5piv5ZCm6Zet5ZCIXHJcbiAgICAgIGxldCBjb3VudCA9IDE7XHJcblxyXG4gICAgICBpZiAoc3RyW2pdID09PSBcIj9cIikge1xyXG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgUGF0dGVybiBjYW5ub3Qgc3RhcnQgd2l0aCBcIj9cIiBhdCAke2p9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHdoaWxlIChqIDwgc3RyTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcGF0dGVybkNoYXIgPSBzdHJbal07XHJcbiAgICAgICAgLy8g5aaC5p6c5pivIFxcICzliJnmt7vliqDkuKTmrKEs5Zug5Li65Zyo5q+U6L6D55qE5pe25YCZLOWtl+espuS4slxcXFwg5Lya6KKr6L2s5LmJ5oiQIFxcIOaJgOS7peWunumZheS4iuS4gOS4qlxc5a+55bqU5Lik5Liq5a2X56ymLOmcgOimgeWKoOS4pOasoVxyXG4gICAgICAgIGlmIChwYXR0ZXJuQ2hhciA9PT0gXCJcXFxcXCIpIHtcclxuICAgICAgICAgIHBhdHRlcm4gKz0gc3RyW2orK10gKyBzdHJbaisrXTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhdHRlcm5DaGFyID09PSBcIilcIikge1xyXG4gICAgICAgICAgLy8g5aaC5p6c5pivKeWwsemXreWQiOWIpOaWree7k+adn1xyXG4gICAgICAgICAgY291bnQtLTtcclxuICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAocGF0dGVybkNoYXIgPT09IFwiKFwiKSB7XHJcbiAgICAgICAgICAvLyDlpZflqINcclxuICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICBpZiAoc3RyW2ogKyAxXSAhPT0gXCI/XCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2FwdHVyaW5nIGdyb3VwcyBhcmUgbm90IGFsbG93ZWQgYXQgJHtqfWApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGF0dGVybiArPSBzdHJbaisrXTtcclxuICAgICAgfVxyXG4gICAgICAvLyBjb3VudCDlrZjlnKjor7TmmI7msqHmnInlrozlhajpl63lkIjmiJbogIXpl63lkIjov4flpJrkuoZcclxuICAgICAgaWYgKGNvdW50KSB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmJhbGFuY2VkIHBhdHRlcm4gYXQgJHtpfWApO1xyXG4gICAgICBpZiAoIXBhdHRlcm4pIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pc3NpbmcgcGF0dGVybiBhdCAke2l9YCk7XHJcblxyXG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUucGF0dGVybiwgaW5kZXg6IGksIHZhbHVlOiBwYXR0ZXJuIH0pO1xyXG4gICAgICBpID0gajtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5LiN5piv5Lul5LiK5ZCE56eN5oOF5Ya1LOWwseWFqOmDqOiupOS4uuaYryDlrZfnrKYgKGNoYXIpXHJcbiAgICB0b2tlbnMucHVzaCh7IHR5cGU6IHRva2Vuc1R5cGUuY2hhciwgaW5kZXg6IGksIHZhbHVlOiBzdHJbaSsrXSB9KTtcclxuICB9XHJcbiAgdG9rZW5zLnB1c2goeyB0eXBlOiB0b2tlbnNUeXBlLmVuZCwgaW5kZXg6IGksIHZhbHVlOiBcIlwiIH0pO1xyXG4gIHJldHVybiB0b2tlbnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmoLnmja7or43ms5XliIbmnpDnu5Pmnpwg5YiG6K+NICzmiJbogIXor7TmmK/nlJ/miJDkuIDkuKrmoIflh4bljJbnmoTmlbDnu4Qs55So5LqO5ZCO57ut6L+e57ut5oCn5aSE55CGXHJcbiAqIOi/lOWbnuWtl+espuS4suaIluiAhSDor43ms5Xlr7nosaFcclxuICog6K+N5rOV5a+56LGh57uT5p6EXHJcbiAqIHtcclxuICogICAgICBtb2RpZmllcjonJywgLy8g5L+u6aWw56ymXHJcbiAgICAgICAgbmFtZTondGVzdCcsIC8vIOWQjeensFxyXG4gICAgICAgIHBhdHRlcm46J1teXFxcXC8jXFxcXD9dKz8nLCAvLyDojIPlvI/vvIjnlKjkuo7lrp7pmYXljLnphY3vvIlcclxuICAgICAgICBwcmVmaXg6Jy8nLCAvLyDliY3nvIBcclxuICAgICAgICBzdWZmaXg6JycsIC8vIOWQjue8gFxyXG4gKiB9XHJcbiAqL1xyXG4vLyBUT0RPIOWQjue7reWPr+S7peiAg+iZkeWwhuWIhuivjeWZqOWSjOagvOW8j+WMlueahOe7n+S4gOaVtOWQiO+8jOebtOaOpei+k+WHuuWIhuivjee7k+aenFxyXG5mdW5jdGlvbiBwYXJzZShzdHIsIG9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IHRva2VucyA9IGxleGVyKHN0cik7XHJcbiAgY29uc3QgeyBwcmVmaXhlcyA9IFwiLi9cIiB9ID0gb3B0aW9ucztcclxuICAvLyBkZWZhdWx0UGF0dGVybiDlupTor6XmmK/kuIDkuKrnibnmgKfnmoTojIPlvI8s55So5p2l5Yy56YWN5Lu75oSP5YC85Y2z5Y+vLOWunumZheS4iueUqOaOkumZpOazlSzlnKjot6/nlLHnmoTliKTmlq3ph4ws5LiN6IO9566X5Zyo6Lev55Sx5Lit55qE5a6e6ZmF5LiK5Y+q5pyJIC8ocGF0aG5hbWUpICMoaGFzaCkgPyhzZWFyY2gpXHJcbiAgY29uc3QgZGVmYXVsdFBhdHRlcm4gPSBgW14ke2VzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCBcIi8jP1wiKX1dKz9gO1xyXG4gIGxldCBpID0gMDtcclxuICBjb25zdCB0b2tlbnNMZW5ndGggPSB0b2tlbnMubGVuZ3RoO1xyXG4gIGxldCByZXN1bHQgPSBbXTtcclxuICBsZXQgcGF0aCA9IFwiXCI7XHJcbiAgbGV0IGtleSA9IDA7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwneivleiOt+WPluaMh+Wumuexu+Wei+eahOWAvCzkuI3lrZjlnKjliJnov5Tlm55udWxsXHJcbiAgICovXHJcbiAgY29uc3QgdHJ5Q29uc3VtZSA9ICh0eXBlKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgIGlmIChpIDwgdG9rZW5zTGVuZ3RoICYmIHRva2Vuc1tpXS50eXBlID09PSB0eXBlKSB7XHJcbiAgICAgIHJlc3VsdCA9IHRva2Vuc1tpXS52YWx1ZTtcclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiDlv4Xpobvojrflj5bmjIflrprlgLws5aaC5p6c5LiN5piv5oyH5a6a5YC85YiZ5oql6ZSZXHJcbiAgICovXHJcbiAgdmFyIG11c3RDb25zdW1lID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gdHJ5Q29uc3VtZSh0eXBlKTtcclxuICAgIC8vIOa7oei2s+acn+acmyzliJnov5Tlm57lgLxcclxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8vIOS4jea7oei2s+acn+acm+WImeaPkOekulxyXG4gICAgY29uc3QgeyB0eXBlOiBuZXh0VHlwZSwgaW5kZXggfSA9IHRva2Vuc1tpXTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVuZXhwZWN0ZWQgJHtuZXh0VHlwZX0gYXQgJHtpbmRleH0sIGV4cGVjdGVkICR7dHlwZX1gKTtcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWbuuWumueahOWJjee8gFxyXG4gICAqL1xyXG4gIHZhciBjb25zdW1lVGV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCByZXN1bHQgPSBcIlwiO1xyXG4gICAgdmFyIHZhbHVlO1xyXG4gICAgd2hpbGUgKFxyXG4gICAgICAodmFsdWUgPVxyXG4gICAgICAgIHRyeUNvbnN1bWUodG9rZW5zVHlwZS5jaGFyKSB8fCB0cnlDb25zdW1lKHRva2Vuc1R5cGUuZXNjYXBlZENoYXIpKVxyXG4gICAgKSB7XHJcbiAgICAgIHJlc3VsdCArPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxuXHJcbiAgd2hpbGUgKGkgPCB0b2tlbnNMZW5ndGgpIHtcclxuICAgIC8vIOiOt+WPlmNoYXJcclxuICAgIGNvbnN0IGNoYXIgPSB0cnlDb25zdW1lKHRva2Vuc1R5cGUuY2hhcik7XHJcbiAgICAvLyDojrflj5ZuYW1lIOWSjCBwYXR0ZXJuXHJcbiAgICBjb25zdCBuYW1lID0gdHJ5Q29uc3VtZSh0b2tlbnNUeXBlLm5hbWUpO1xyXG4gICAgY29uc3QgcGF0dGVybiA9IHRyeUNvbnN1bWUodG9rZW5zVHlwZS5wYXR0ZXJuKTtcclxuICAgIC8vIG5hbWUg5oiW6ICFIHBhdHRlcm4g5a2Y5Zyo6K+05piO5LqG5a2Y5Zyo5Yy56YWN57G75Z6LLOS7juacrOi0qOS4iueciyzov5nkuKTnp43mg4XlhrXnmoTlpITnkIbpgLvovpHmmK/kuIDoh7TnmoQs6YO95piv6K6+572ubmFtZeWAvCznhLblkI7orr7nva7ojIPlvI9cclxuICAgIGlmIChuYW1lIHx8IHBhdHRlcm4pIHtcclxuICAgICAgLy8g5YmN57yA6buY6K6k5Li6Y2hhcueahOWAvFxyXG4gICAgICBjb25zdCBwcmVmaXggPSBjaGFyIHx8IFwiXCI7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiDlpoLmnpzliY3nvIDkuI3lrZjlnKgs5YiZ6KGo5piOY2hhcuaYr3BhdGjnmoTkuIDpg6jliIYs5aaC5p6c5YmN57yA5a2Y5Zyo5YiZ55u05o6l5L2c5Li65YmN57yA5L2/55So5Y2z5Y+vLOi/mOWtmOWcqOS4gOenjeeJueauiueahOWcuuaZryzlsLHmmK/lm7rlrprnmoTlgLzlkI7lj4jljLnphY3kuoblr7nlupTnmoTmlbDmja4s5piv5LiA5Liq5Yqo5oCB55qE6Lev55SxXHJcbiAgICAgICAqIOS4vuS4gOS4quS+i+WtkCzliqjmgIHot6/nlLHnmoTliY3nvIDpg73mmK8vZGV0YWlsICsg5a+55bqU6K+m5oOFaWTnmoTlvaLlvI8s55So5LqO55qE5Zy65pmv5Y+v6IO95piv5Z+L54K5562JLOaaguaXtuiAg+iZkeS4jeWIsOWunumZheeahOS9v+eUqOeUqOmAlCzkvYbmmK/lupTor6XmnInlrZjlnKjnmoTlj6/og73mgKdcclxuICAgICAgICovXHJcbiAgICAgIGlmIChwcmVmaXhlcy5pbmRleE9mKHByZWZpeCkgPT09IC0xKSB7XHJcbiAgICAgICAgcGF0aCArPSBwcmVmaXg7XHJcbiAgICAgICAgcHJlZml4ID0gXCJcIjtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICog5aaC5p6ccGF0aOWtmOWcqOWwseebtOaOpeiuvue9ruS6hnBhdGgs5Zug5Li65a+55LqOcGF0aOWtmOWcqOeahOWcuuaZryzmlbDmja7mmK/lm7rlrprkuobot6/nlLHnmoQs5omA5Lul6IyD5byP5ZKM6YWN572u55qE5YW25LuW5p2h5Lu26YO95piv5rKh5pyJ55So55qEXHJcbiAgICAgICAqIOayoeacieWJjee8gOeahOaXtuWAmSzlrp7pmYXkuIror7TmmI7kuIrkuIDkuKrmlbDmja7mmK/kuIDkuKrnmoTlm7rlrprlgLws6L+Z5bCx5Y+v6IO95piv5LiA5Liq5Yqo5oCB6Lev55Sx55qE5Zy65pmvXHJcbiAgICAgICAqL1xyXG4gICAgICBpZiAocGF0aCkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHBhdGgpO1xyXG4gICAgICAgIHBhdGggPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOmcgOimgeaMieeFp+WKqOaAgeWPguaVsOeahOWMuemFjeWcuuaZr+WkhOeQhizmnIluYW1l5bCx5L2/55SobmFtZSzmsqHmnInlsLHpu5jorqRrZXnlgLzljbPlj68s5a+55LqO5LiA5LiqdXJs6ICM6KiALOWunumZheS4iuWfuuacrGtleeS4jeS8muWkquWkmizkv67ppbDnrKbmoIfor4Yx5Liq5aSa5Liq55qE5YWz57O7LOWwseaYr+ato+WImeihqOi+vuW8j+S4reeahCsgPyAqXHJcbiAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxyXG4gICAgICAgIHByZWZpeCxcclxuICAgICAgICBzdWZmaXg6IFwiXCIsXHJcbiAgICAgICAgcGF0dGVybjogcGF0dGVybiB8fCBkZWZhdWx0UGF0dGVybixcclxuICAgICAgICBtb2RpZmllcjogdHJ5Q29uc3VtZSh0b2tlbnNUeXBlLm1vZGlmaWVyKSB8fCBcIlwiLFxyXG4gICAgICB9KTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5YiG5Ymy56ym5b2T5L2c5piv6Lev55Sx55qE5LiA6YOo5YiGLOWPr+iDveWxnuS6juS4gOenjeWlh+aAqueahOi3r+eUseW9ouW8jyzlhbbku5bmg4XlhrXlsLHmmK/kuI3mlq3nmoTmi7zmjqVjaGFyLOefpemBk+aXoOazleaLvOaOpeWujOaIkCjmnKzotKjkuIrmmK/lsIbkuYvliY3mi4bliIbnmoTliIbor43nu4TlkIjotbfmnaUpXHJcbiAgICBjb25zdCB2YWx1ZSA9IGNoYXIgfHwgdHJ5Q29uc3VtZSh0b2tlbnNUeXBlLmVzY2FwZWRDaGFyKTtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBwYXRoICs9IHZhbHVlO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpoLmnpxwYXRo5a2Y5Zyo5bCx55u05o6l5aGr5YWFXHJcbiAgICBpZiAocGF0aCkge1xyXG4gICAgICByZXN1bHQucHVzaChwYXRoKTtcclxuICAgICAgcGF0aCA9IFwiXCI7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wZW4gPSB0cnlDb25zdW1lKHRva2Vuc1R5cGUub3Blbik7XHJcbiAgICBpZiAob3Blbikge1xyXG4gICAgICAvKipcclxuICAgICAgICogb3BlbuS4reeahOWGheWuueWunumZheS4iuS5n+WPquWMheWQq+S4ieenjeexu+WeiyzpppblhYjliY3pnaJjaGFy57G75Z6L55qELOS4gOW8gOWni+iOt+WPluWIsOeahGNoYXLnsbvlnovnmoTlrp7pmYXkuIrpg73mmK/liY3nvIAs5Zug5Li66L+Z6YOo5YiG5piv5LiN5Y+Y55qEXHJcbiAgICAgICAqIOeEtuWQjuiOt+WPluWIsOeahOexu+Wei+S4uiBuYW1lIOWSjCBwYXR0ZXJuIOS4pOenjSwgIOacgOWQjueahGNoYXLnsbvlnovmjInnhaflkI7nvIDmnaVcclxuICAgICAgICog5L2G5piv5b+F6aG76KaBb3BlbiBjbG9zZSDnu4TlkIjnu5PlsL4s5LiN6IO95aSa5Liqb3Blbizov5nnp43mg4XlhrXkuI3lgZrlpITnkIZcclxuICAgICAgICovXHJcbiAgICAgIGNvbnN0IHByZWZpeCA9IGNvbnN1bWVUZXh0KCk7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSB0cnlDb25zdW1lKHRva2Vuc1R5cGUubmFtZSkgfHwgXCJcIjtcclxuICAgICAgY29uc3QgcGF0dGVybiA9IHRyeUNvbnN1bWUodG9rZW5zVHlwZS5wYXR0ZXJuKSB8fCBcIlwiO1xyXG4gICAgICBjb25zdCBzdWZmaXggPSBjb25zdW1lVGV4dCgpO1xyXG4gICAgICBtdXN0Q29uc3VtZSh0b2tlbnNUeXBlLmNsb3NlKTtcclxuICAgICAgLy8g5o+S5YWl5Yik5pat57G75Z6LLG5hbWXlj6rmnInlnKjlrZjlnKggbmFtZSDmiJbogIUgcGF0dGVybiDnmoTml7blgJnmiY3mmK/mnInku7flgLznmoTvvIzlkKbliJnlrp7pmYXkuIrlsLHmmK/kuIDkuKrlm7rlrprlgLxcclxuICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgIG5hbWU6IG5hbWUgfHwgKHBhdHRlcm4gPyBrZXkrKyA6IFwiXCIpLFxyXG4gICAgICAgIHByZWZpeCxcclxuICAgICAgICBzdWZmaXgsXHJcbiAgICAgICAgcGF0dGVybjogbmFtZSAmJiAhcGF0dGVybiA/IGRlZmF1bHRQYXR0ZXJuIDogcGF0dGVybixcclxuICAgICAgICBtb2RpZmllcjogdHJ5Q29uc3VtZSh0b2tlbnNUeXBlLm1vZGlmaWVyKSB8fCBcIlwiLFxyXG4gICAgICB9KTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICAvLyDlvZPmiYDmnInnmoTmg4XlhrXpg73kuI3ljLnphY3nmoTml7blgJks5b+F6aG75pivZW5k57uT5bC+XHJcbiAgICBtdXN0Q29uc3VtZSh0b2tlbnNUeXBlLmVuZCk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDliKTmlq3mmK/lkKbljLrliIblpKflsI/lhplcclxuICovXHJcbmZ1bmN0aW9uIGZsYWdzKG9wdGlvbnMpIHtcclxuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/IFwiXCIgOiBcImlcIjtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWwhuWIhuivjeWkhOeQhui/h+eahOaVsOaNrizovazmjaLmiJDmraPliJnooajovr7lvI9cclxuICovXHJcbmZ1bmN0aW9uIHRva2Vuc1RvUmVnZXhwKHRva2Vucywga2V5cywgb3B0aW9ucykge1xyXG4gIGNvbnN0IHtcclxuICAgIHN0cmljdCA9IGZhbHNlLFxyXG4gICAgc3RhcnQgPSB0cnVlLFxyXG4gICAgZW5kID0gdHJ1ZSxcclxuICAgIGVuY29kZSA9ICh4KSA9PiB4LFxyXG4gIH0gPSBvcHRpb25zO1xyXG4gIC8vIOiuvue9rueahOe7k+WwvuWtl+espui9rOS5ieWMluWkhOeQhlxyXG4gIGNvbnN0IGVuZHNXaXRoID0gYFske2VzY2FwZVN0cmluZyhvcHRpb25zLmVuZHNXaXRoIHx8IFwiXCIpfV18JGA7XHJcbiAgLy8g5Yy56YWN55qE5pyA5ZCO5LiA5Liq6K+N55qE6L2s5LmJ5YyW5aSE55CGXHJcbiAgY29uc3QgZGVsaW1pdGVyID0gYFske2VzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCBcIi8jP1wiKX1dYDtcclxuICBsZXQgcm91dGUgPSBzdGFydCA/IFwiXlwiIDogXCJcIjtcclxuXHJcbiAgLy8g6YGN5Y6G5YiG6K+N5pWw57uEXHJcbiAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcclxuICAgIC8vIOWmguaenOaYr+Wtl+espuS4suWwseebtOaOpeaLvOaOpeWIsHJvdXRl5LitXHJcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyhlbmNvZGUodG9rZW4pKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIOWIhuivjeWvueixoeeahOaXtuWAme+8jOWFiOWkhOeQhuWJjeWQjue8gOeahOato+WImVxyXG4gICAgICBjb25zdCBwcmVmaXggPSBlc2NhcGVTdHJpbmcoZW5jb2RlKHRva2VuLnByZWZpeCkpO1xyXG4gICAgICBjb25zdCBzdWZmaXggPSBlc2NhcGVTdHJpbmcoZW5jb2RlKHRva2VuLnN1ZmZpeCkpO1xyXG5cclxuICAgICAgLy8g5aaC5p6c5a2Y5Zyo6IyD5byPXHJcbiAgICAgIGlmICh0b2tlbi5wYXR0ZXJuKSB7XHJcbiAgICAgICAgLy8g6K6+572u5Zyoa2V5c+S4reS4u+imgeaYr+S4uuS6huWQjue7reWkhOeQhnVybOS4rXBhcmFtc+aVsOaNrlxyXG4gICAgICAgIGlmIChrZXlzKSB7XHJcbiAgICAgICAgICBrZXlzLnB1c2godG9rZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByZWZpeCB8fCBzdWZmaXgpIHtcclxuICAgICAgICAgIGlmICh0b2tlbi5tb2RpZmllciA9PT0gXCIrXCIgfHwgdG9rZW4ubW9kaWZpZXIgPT09IFwiKlwiKSB7XHJcbiAgICAgICAgICAgIC8vIOWwhiArIOWSjCAqIOWNleeLrOWkhOeQhuS6hu+8jOWNs+aJi+WKqOeahOiuvue9ruS4gOS4quWtmOWcqOeahO+8jOeEtuWQjuWGjeiuvue9ruS4gOS4qiog55qE77yM54S25ZCO5pW05L2T5Li6ID9cclxuICAgICAgICAgICAgY29uc3QgbW9kID0gdG9rZW4ubW9kaWZpZXIgPT09IFwiKlwiID8gXCI/XCIgOiBcIlwiO1xyXG4gICAgICAgICAgICByb3V0ZSArPSBgKD86JHtwcmVmaXh9KCg/OiR7dG9rZW4ucGF0dGVybn0pKD86JHtzdWZmaXh9JHtwcmVmaXh9KD86JHt0b2tlbi5wYXR0ZXJufSkpKikke3N1ZmZpeH0pJHttb2R9YDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJvdXRlICs9IGAoPzoke3ByZWZpeH0oJHt0b2tlbi5wYXR0ZXJufSkke3N1ZmZpeH0pJHt0b2tlbi5tb2RpZmllcn1gO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDmsqHmnInliY3lkI7nvIDlsLHnm7TmjqXorr7nva7mraPliJnljbPlj69cclxuICAgICAgICAgIHJvdXRlICs9IGAoJHt0b2tlbi5wYXR0ZXJufSkke3Rva2VuLm1vZGlmaWVyfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFRPRE8g5rKh5pyJ6IyD5byP77yM6K+05piO5pivPz8/ICzmsqHogIPomZHmuIXmpZpcclxuICAgICAgICByb3V0ZSArPSBgKD86JHtwcmVmaXh9JHtzdWZmaXh9KSR7dG9rZW4ubW9kaWZpZXJ9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyDmmK/lkKblrZfnrKbkuLLnmoTnu5PlsL7ljLnphY1cclxuICBpZiAoZW5kKSB7XHJcbiAgICAvLyDlhYHorrjlsL7pg6jliIblibLnrKblpITnkIZcclxuICAgIGlmICghc3RyaWN0KSB7XHJcbiAgICAgIHJvdXRlICs9IGAke2RlbGltaXRlcn0/YDtcclxuICAgIH1cclxuICAgIC8vIOaYr+WQpuiuvue9rue7k+adn+Wtl+espu+8jOWmguaenOayoeacieWImem7mOiupOS4uiQg5ZCm5YiZ5oyH5a6a5Zu65a6a5YC8XHJcbiAgICByb3V0ZSArPSAhb3B0aW9ucy5lbmRzV2l0aCA/IFwiJFwiIDogYCg/PSR7ZW5kc1dpdGh9KWA7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIOWmguaenOacgOWQjuS7peaYr+Wtl+espuS4su+8jOWImeWIpOaWreaYr+WQpuaYr+WwvumDqOWIhuWJsuesplxyXG4gICAgY29uc3QgZW5kVG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xyXG4gICAgY29uc3QgaXNFbmREZWxpbWl0ZWQgPVxyXG4gICAgICB0eXBlb2YgZW5kVG9rZW4gPT09IFwic3RyaW5nXCJcclxuICAgICAgICA/IGRlbGltaXRlci5pbmRleE9mKGVuZFRva2VuW2VuZFRva2VuLmxlbmd0aCAtIDFdKSA+IC0xXHJcbiAgICAgICAgOiAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICAgIGVuZFRva2VuID09PSB1bmRlZmluZWQ7XHJcblxyXG4gICAgLy8g5YWB6K645bC+6YOo5YiG5Ymy56ym5aSE55CGXHJcbiAgICBpZiAoIXN0cmljdCkge1xyXG4gICAgICByb3V0ZSArPSBgKD86JHtkZWxpbWl0ZXJ9KD89JHtlbmRzV2l0aH0pKT9gO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOacgOWQjuS4gOS4quS4jeaYr+e7k+adn+WIhuWJsuespueahOaXtuWAme+8jOaJi+WKqOa3u+WKoFxyXG4gICAgaWYgKCFpc0VuZERlbGltaXRlZCkge1xyXG4gICAgICByb3V0ZSArPSBgKD89JHtkZWxpbWl0ZXJ9fCR7ZW5kc1dpdGh9KWA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFJlZ0V4cChyb3V0ZSwgZmxhZ3Mob3B0aW9ucykpO1xyXG59XHJcblxyXG4vKipcclxuICog5a2X56ym5Liy5aSE55CGXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIHRva2Vuc1RvUmVnZXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOato+WImei9rOato+WImVxyXG4gKi9cclxuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAocGF0aCwga2V5cykge1xyXG4gIC8vIOato+WImeeahOWkhOeQhuWmguaenOayoeaciWtleXPnmoTvvIznm7TmjqXov5Tlm57ljbPlj69cclxuICBpZiAoIWtleXMpIHJldHVybiBwYXRoO1xyXG4gIC8vIFRPRE8g5Y+q5piO55m95LqG6KaB5bCGIOayoeaHgiAgXFwoIOW8gOWktCAgICg/OlxcPzwoLio/KT4pIOmdnuiOt+WPluWMuemFjT885Lu75oSP5YC8PiDnmoTmlbDmja4gICAgKC4qPykg5Lu75oSP5a2X56ym5a2Y5ZyoMOS4quaIljHkuKrvvIzlubbojrflj5YgICAgICAoPyFcXD8pIOS4uumdnj9cclxuICBjb25zdCBncm91cHNSZWdleHAgPSAvXFwoKD86XFw/PCguKj8pPik/KD8hXFw/KS9nO1xyXG5cclxuICBsZXQgaW5kZXggPSAwO1xyXG4gIGxldCBleGVjUmVzdWx0ID0gZ3JvdXBzUmVnZXhwLmV4ZWMocGF0aC5zb3VyY2UpO1xyXG4gIHdoaWxlIChleGVjUmVzdWx0KSB7XHJcbiAgICBrZXlzLnB1c2goe1xyXG4gICAgICAvLyBVc2UgcGFyZW50aGVzaXplZCBzdWJzdHJpbmcgbWF0Y2ggaWYgYXZhaWxhYmxlLCBpbmRleCBvdGhlcndpc2VcclxuICAgICAgbmFtZTogZXhlY1Jlc3VsdFsxXSB8fCBpbmRleCsrLFxyXG4gICAgICBwcmVmaXg6IFwiXCIsXHJcbiAgICAgIHN1ZmZpeDogXCJcIixcclxuICAgICAgbW9kaWZpZXI6IFwiXCIsXHJcbiAgICAgIHBhdHRlcm46IFwiXCIsXHJcbiAgICB9KTtcclxuICAgIGV4ZWNSZXN1bHQgPSBncm91cHNSZWdleC5leGVjKHBhdGguc291cmNlKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwYXRoO1xyXG59XHJcblxyXG4vKipcclxuICog5pWw57uE6L2s5q2j5YiZXHJcbiAqL1xyXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwKHBhdGhzLCBrZXlzLCBvcHRpb25zKSB7XHJcbiAgLy8g5b6q546v6LCD55SocGF0aHPvvIzmr4/kuKrljZXni6zlpITnkIbvvIznhLblkI7nlJ/miJDkuIDkuKp8IOeahOWMuemFjeW9ouW8j+eahOato+WImVxyXG4gIGNvbnN0IHBhcnRzID0gcGF0aHMubWFwKChwYXRoKSA9PiBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucykuc291cmNlKTtcclxuICByZXR1cm4gbmV3IFJlZ0V4cChgKD86JHtwYXJ0cy5qb2luKFwifFwiKX0pYCwgZmxhZ3Mob3B0aW9ucykpO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl8UmVnRXhwfSBwYXRoXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGtleXNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICovXHJcbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XHJcbiAgLy8gVE9ETyDmlbDnu4TlkozmraPliJnnmoTpg73kuI3lpKrkuobop6Pkvb/nlKjlnLrmma9cclxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIGtleXMpO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSByZXR1cm4gYXJyYXlUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcclxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XHJcbn1cblxuZXhwb3J0cy5wYXRoVG9SZWdleHAgPSBwYXRoVG9SZWdleHA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLXRvLXJlZ2V4cC5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNjk4X187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1Myk7XG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==