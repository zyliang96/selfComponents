/*! For license information please see history.min.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.zyliangHistory=t():e.zyliangHistory=t()}(self,(function(){return(()=>{"use strict";var e={"./config/index.js":(e,t,a)=>{a.r(t),a.d(t,{BeforeUnloadEventType:()=>n,HashChangeEventType:()=>o,PopStateEventType:()=>r,actionType:()=>s,enumValueType:()=>i});const n="beforeunload",o="hashchange",r="popstate",s={push:"PUSH",replace:"REPLACE",pop:"POP"},i={object:"Object",array:"Array",basic:"Basic"}},"./node_modules/resolve-pathname/esm/resolve-pathname.js":(e,t,a)=>{function n(e){return"/"===e.charAt(0)}function o(e,t){for(var a=t,n=a+1,o=e.length;n<o;a+=1,n+=1)e[a]=e[n];e.pop()}a.r(t),a.d(t,{default:()=>r});const r=function(e,t){void 0===t&&(t="");var a,r=e&&e.split("/")||[],s=t&&t.split("/")||[],i=e&&n(e),c=t&&n(t),l=i||c;if(e&&n(e)?s=r:r.length&&(s.pop(),s=s.concat(r)),!s.length)return"/";if(s.length){var u=s[s.length-1];a="."===u||".."===u||""===u}else a=!1;for(var h=0,p=s.length;p>=0;p--){var f=s[p];"."===f?o(s,p):".."===f?(o(s,p),h++):h&&(o(s,p),h--)}if(!l)for(;h--;h)s.unshift("..");!l||""===s[0]||s[0]&&n(s[0])||s.unshift("");var d=s.join("/");return a&&"/"!==d.substr(-1)&&(d+="/"),d}},"./src/createBrowserHistory.js":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var n=a("./utils/index.js"),o=a("./config/index.js"),r=a("./utils/LocationUtils.js");function s(e={}){const{window:t=document.defaultView,isShowBeforeUnload:a=!1}=e,s=e.basename?(0,n.stripTrailingSlash)((0,n.addLeadingSlash)(e.basename)):"",i=t.history,c=(0,n.createEventList)({removeCallback:f}),l=(0,n.createEventList)({isNeedResult:!0,removeCallback:f});let u=o.actionType.pop,h=(0,r.createLocation)({path:t.location,basename:s,state:i.state});function p(e){let a=(0,r.createLocation)({path:t.location,basename:s,state:i.state});(0,r.createPath)(a)!==(0,r.createPath)(h)&&function(e){if(d)d=!1,console.log("blockedPopTx",d);else{const t={action:o.actionType.pop,location:e};if(l.length){if(l.call(t))console.log(h,e),h=e;else{const t=h.state.index-e.state.index;console.log("isNotOk",d,h,e),y(t)}}else m(t)}}(a)}function f(){t.removeEventListener(o.PopStateEventType,p)}t.addEventListener(o.PopStateEventType,p);let d=null;function g(e){const{action:t,location:a}=e;return!l.length||l.call({action:t,location:a})}function m(e){u=e.action,h=e.location,c.call({action:u,location:h})}function y(e){i.go(e)}function b(e){a&&(e.preventDefault(),e.returnValue="")}return{get action(){return u},get location(){return h},createHref:function(e){if("string"==typeof e)return(0,r.createPath)((0,r.createLocation)({path:e,basename:s}))},push:function(e,t){const a=o.actionType.push,n=Object.assign({},t,{index:h.state&&h.state.index+1}),c=(0,r.createLocation)({path:e,state:n,basename:s}),l={action:a,location:c};if(g(l)){try{const e=(0,r.getBaseHref)()+s+(0,r.createPath)(c);i.pushState(n,"",e)}catch(e){console.error(e)}m(l)}},replace:function(e,t){const a=o.actionType.push,n=Object.assign({},t,{index:h.state&&h.state.index}),c=(0,r.createLocation)({path:e,state:n,basename:s}),l={action:a,location:c};if(g(l)){try{const e=(0,r.getBaseHref)()+s+(0,r.createPath)(c);i.replaceState(n,"",e)}catch(e){console.error(e)}m(l)}},go:y,back:function(){y(-1)},forward:function(){y(1)},listen:function(e){return c.push(e)},block:function(e){let a=l.push(e);return 1===l.length&&t.addEventListener(o.BeforeUnloadEventType,b),()=>{a(),l.length||t.removeEventListener(o.BeforeUnloadEventType,b)}}}}},"./src/createHashHistory.js":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var n=a("./utils/index.js"),o=a("./config/index.js"),r=a("./utils/LocationUtils.js");function s(e={}){const{window:t=document.defaultView,isShowBeforeUnload:a=!1}=e,s=e.basename?(0,n.stripTrailingSlash)((0,n.addLeadingSlash)(e.basename)):"",i=t.history,c=(0,n.createEventList)({removeCallback:f}),l=(0,n.createEventList)({isNeedResult:!0,removeCallback:f});let u=o.actionType.pop,h=(0,r.createLocation)({path:t.location.hash.substr(1),basename:s,state:i.state});function p(e){let a=(0,r.createLocation)({path:t.location.hash.substr(1),basename:s,state:i.state});(0,r.createPath)(a)!==(0,r.createPath)(h)&&function(e){{const t={action:o.actionType.pop,location:e};if(l.length){if(l.call(t))h=e;else{m(h.state.index-e.state.index)}}else g(t)}}(a)}function f(){t.removeEventListener(o.HashChangeEventType,p)}t.addEventListener(o.HashChangeEventType,p);function d(e){const{action:t,location:a}=e;return!l.length||l.call({action:t,location:a})}function g(e){u=e.action,h=e.location,c.call({action:u,location:h})}function m(e){i.go(e)}function y(e){a&&(e.preventDefault(),e.returnValue="")}return{get action(){return u},get location(){return h},createHref:function(e){if("string"==typeof e)return(0,r.createPath)((0,r.createLocation)({path:e,basename:s}))},push:function(e,t){const a=o.actionType.push,n=Object.assign({},t,{index:h.state&&h.state.index+1}),c=(0,r.createLocation)({path:e,state:n,basename:s}),l={action:a,location:c};if(d(l)){try{const e=(0,r.getBaseHref)()+"#"+s+(0,r.createPath)(c);i.pushState(n,"",e)}catch(e){console.error(e)}g(l)}},replace:function(e,t){const a=o.actionType.push,n=Object.assign({},t,{index:h.state&&h.state.index}),c=(0,r.createLocation)({path:e,state:n,basename:s}),l={action:a,location:c};if(d(l)){try{const e=(0,r.getBaseHref)()+"#"+s+(0,r.createPath)(c);i.replaceState(n,"",e)}catch(e){console.error(e)}g(l)}},go:m,back:function(){m(-1)},forward:function(){m(1)},listen:function(e){return c.push(e)},block:function(e){let a=l.push(e);return 1===l.length&&t.addEventListener(o.BeforeUnloadEventType,y),()=>{a(),l.length||t.removeEventListener(o.BeforeUnloadEventType,y)}}}}},"./src/index.js":(e,t,a)=>{a.r(t),a.d(t,{createHashHistory:()=>n.default,createBrowserHistory:()=>o.default,createLocation:()=>r.createLocation,createPath:()=>r.createPath,getBaseHref:()=>r.getBaseHref,hasBasename:()=>r.hasBasename,locationsAreEqual:()=>r.locationsAreEqual,parsePath:()=>r.parsePath,stripBasename:()=>r.stripBasename,addLeadingSlash:()=>s.addLeadingSlash,createEventList:()=>s.createEventList,getUniqueKey:()=>s.getUniqueKey,getValueType:()=>s.getValueType,isObject:()=>s.isObject,stripLeadingSlash:()=>s.stripLeadingSlash,stripTrailingSlash:()=>s.stripTrailingSlash,valueEqual:()=>s.valueEqual});var n=a("./src/createHashHistory.js"),o=a("./src/createBrowserHistory.js"),r=a("./utils/LocationUtils.js"),s=a("./utils/index.js")},"./utils/LocationUtils.js":(e,t,a)=>{a.r(t),a.d(t,{createLocation:()=>o,parsePath:()=>r,createPath:()=>s,hasBasename:()=>i,stripBasename:()=>c,getBaseHref:()=>l,locationsAreEqual:()=>u});var n=a("./utils/index.js");a("./node_modules/resolve-pathname/esm/resolve-pathname.js");function o(e={}){const{path:t,basename:a,key:o=(0,n.getUniqueKey)(),state:s={index:0},currentLocation:i}=e;return{...r(t,a,i),key:o,state:s}}function r(e,t,a){let n={pathname:"/",search:"",hash:""};"string"==typeof e?n.pathname=e||"/":n=Object.assign(n,{...e});const o=n.pathname.indexOf("#");o>-1&&(n.hash=n.pathname.substr(o),n.pathname=n.pathname.substr(0,o));const r=n.pathname.indexOf("?");return r>-1&&(n.search=n.pathname.substr(r),n.pathname=n.pathname.substr(0,r)),n.pathname=c(n.pathname,t),a?n.pathname?"/"!==n.pathname.charAt(0)&&(n.pathname=resolvePathname(n.pathname,a.pathname)):n.pathname=a.pathname:n.pathname||(n.pathname="/"),{pathname:n.pathname,search:"?"===n.search?"":n.search,hash:"#"===n.hash?"":n.hash}}function s(e={}){const{pathname:t,search:a,hash:n}=e;let o=t||"/";return a&&"?"!==a&&(o+="?"===a.charAt(0)?a:`?${a}`),n&&"#"!==n&&(o+="#"===n.charAt(0)?n:`#${n}`),o}function i(e="",t=""){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}function c(e="",t=""){return i(e,t)?e.substr(t.length):e}function l(){let e=document.querySelector("base"),t="";if(e&&e.getAttribute("href")){let e=window.location.href,a=e.indexOf("#");t=-1===a?e:e.slice(0,a)}return t}function u(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,n.valueEqual)(e.state,t.state)}},"./utils/index.js":(e,t,a)=>{a.r(t),a.d(t,{createEventList:()=>o,getUniqueKey:()=>r,isObject:()=>s,getValueType:()=>i,valueEqual:()=>c,addLeadingSlash:()=>l,stripLeadingSlash:()=>u,stripTrailingSlash:()=>h});var n=a("./config/index.js");function o(e={}){const{isNeedResult:t=!1,removeCallback:a}=e;let n=[];return{get length(){return n.length},push:e=>(n.push(e),()=>{n=n.filter((t=>t!==e)),n.length||a&&a()}),call(e){let a=!0;for(let o=0,r=n.length;o<r;o++){const r=n[o];if(a=r&&r(e),t&&!a)break}return a}}}function r(e=""){let t=Date.now().toString(32)+e.toString(),a=[],n=1,o=0;for(let e=1,r=t.length;e<=r;e++)e===n&&(a[o]=String.fromCharCode(65+Math.floor(22*Math.random())),o++,n*=2),a[o]=t[e-1],o++;return a.join("")}function s(e){return e&&"object"==typeof e&&"[object Object]"===toString.call(e)}function i(e){let t=n.enumValueType.basic;s(e)&&(t=n.enumValueType.object),Array.isArray(e)&&(t=n.enumValueType.array)}function c(e,t){const a=i(e);if(a!==i(t))return!1;if(a===n.enumValueType.basic)return e===t;if(a===n.enumValueType.object){const a=Object.keys(e);for(let n=0,o=a.length;n<o;n++){const o=a[n];if(!c(e[o],t[o]))return!1}}if(a===n.enumValueType.array){if(e.length!==t.length)return falsei;for(let a=0,n=e.length;a<n;a++){if(!c(e[a],t[a]))return!1}}return!1}function l(e){return"/"===e.charAt(0)?e:"/"+e}function u(e){return"/"===e.charAt(0)?e.substr(1):e}function h(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}}},t={};function a(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n](o,o.exports,a),o.exports}return a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a("./src/index.js")})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,