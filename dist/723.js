(self.webpackChunkselfcomponents=self.webpackChunkselfcomponents||[]).push([[723,583,192,809],{68723:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>u});var t=r(87809),s=[{title:"测试文章",description:"这是文章的描述",time:"2021-03-24",classify:[t.ArticleClassifyEnum.javaScript,t.ArticleClassifyEnum.css],key:"test_article",type:t.MenuTypeEnum.article,detail:r(27583)},{title:"测试专栏",description:"这是专栏的描述",time:"2021-03-24",classify:[t.ArticleClassifyEnum.javaScript,t.ArticleClassifyEnum.css],key:"test_column",type:t.MenuTypeEnum.column,children:[{title:"测试文章",description:"这是文章的描述",time:"2021-03-24",classify:[t.ArticleClassifyEnum.javaScript,t.ArticleClassifyEnum.css],key:"test_column_one",type:t.MenuTypeEnum.article,detail:r(51192)}]}],i=[],o=[],a=[],l=[];function c(e){return e.sort((function(e,n){return new Date(e.time).getTime()-new Date(n.time).getTime()}))}!function e(n){Array.isArray(n)&&n.forEach((function(n){switch(n.type){case t.MenuTypeEnum.article:i.push(n);break;case t.MenuTypeEnum.column:o.push(n)}Array.isArray(n.classify)&&n.classify.forEach((function(e){var n=a.indexOf(e);n<0?(a.push(e),l.push(0)):l[n]++})),Array.isArray(n.children)&&e(n.children)}))}(s);var d=[{type:t.MenuTypeEnum.article,name:"文章"},{type:t.MenuTypeEnum.column,name:"专栏"}];const u={articleList:c(i),columnList:c(o),classifyList:a,classifyTotalList:l,menuList:d}},87809:(e,n,r)=>{"use strict";var t,s;r.r(n),r.d(n,{MenuTypeEnum:()=>t,ArticleClassifyEnum:()=>s}),function(e){e.article="article",e.column="column"}(t||(t={})),function(e){e.javaScript="javaScript",e.css="css",e.html="html",e.node="node",e.webpack="webpack",e.compilers="编译原理",e.dataStructure="数据结构"}(s||(s={}))},27583:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t="## Button 按钮\r\n\r\nDisplays important alert messages.\r\n\r\n### Basic usage\r\n\r\n\r\n![测试](/images/noExpert.png)\r\n\r\nAlert components are non-overlay elements in the page that does not disappear automatically.\r\n\r\n:::demo Alert provides 4 types of themes defined by `type`, whose default value is `info`.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    console.log(11111)\r\n}\r\n```\r\n\r\n:::\r\n\r\n### Theme\r\n\r\nAlert provide two different themes, `light` and `dark`.\r\n\r\n:::demo Set `effect` to change theme, default is `light`.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n### Customizable close button\r\n\r\nCustomize the close button as texts or other symbols.\r\n\r\n:::demo Alert allows you to configure if it's closable. The close button text and closing callbacks are also customizable. `closable` attribute decides if the component can be closed or not. It accepts `boolean`, and the default is `true`. You can set `close-text` attribute to replace the default cross symbol as the close button. Be careful that `close-text` must be a string. `close` event fires when the component is closed.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n### With icon\r\n\r\nDisplaying an icon improves readability.\r\n\r\n:::demo Setting the `show-icon` attribute displays an icon that corresponds with the current Alert type.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n## Centered text\r\n\r\nUse the `center` attribute to center the text.\r\n\r\n:::demo\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n### With description\r\n\r\nDescription includes a message with more detailed information.\r\n\r\n:::demo Besides the required `title` attribute, you can add a `description` attribute to help you describe the alert with more details. Description can only store text string, and it will word wrap automatically.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n### With icon and description\r\n\r\n:::demo At last, this is an example with both icon and description.\r\n\r\n```js\r\nfunction ChooseSeatDemo(props) {\r\n    const [visible, setVisible] = React.useState(false);\r\n\r\n    const handlePassRoomSeat = (arr) => {\r\n        console.log(arr);\r\n        setVisible(false);\r\n    };\r\n    const handleHideModal = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>测试问题</div>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n:::\r\n\r\n### Attributes\r\n\r\n| Attribute   | Description                                                | Type    | Accepted Values            | Default |\r\n| ----------- | ---------------------------------------------------------- | ------- | -------------------------- | ------- |\r\n| title       | title                                                      | string  | —                          | —       |\r\n| type        | Component type                                             | string  | success/warning/info/error | info    |\r\n| description | Descriptive text. Can also be passed with the default slot | string  | —                          | —       |\r\n| closable    | If closable or not                                         | boolean | —                          | true    |\r\n| center      | Whether to center the text                                 | boolean | —                          | false   |\r\n| close-text  | Customized close button text                               | string  | —                          | —       |\r\n| show-icon   | If a type icon is displayed                                | boolean | —                          | false   |\r\n| effect      | Choose theme                                               | string  | light/dark                 | light   |\r\n\r\n### Slot\r\n\r\n| Name  | Description                |\r\n| ----- | -------------------------- |\r\n| —     | description                |\r\n| title | content of the Alert title |\r\n\r\n### Events\r\n\r\n| Event Name | Description                | Parameters |\r\n| ---------- | -------------------------- | ---------- |\r\n| close      | fires when alert is closed | —          |\r\n"},51192:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>t});const t=""}}]);