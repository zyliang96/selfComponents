/*! For license information please see history.main.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.zyliangHistory=t():e.zyliangHistory=t()}(self,(function(){return(()=>{"use strict";var e={"./config/index.js":(e,t,n)=>{n.r(t),n.d(t,{BeforeUnloadEventType:()=>a,HashChangeEventType:()=>o,PopStateEventType:()=>r,actionType:()=>i});const a="beforeunload",o="hashchange",r="popstate",i={push:"PUSH",replace:"REPLACE",pop:"POP"}},"./src/createBrowserHistory.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var a=n("./utils/index.js"),o=n("./config/index.js"),r=n("./utils/LocationUtils.js");function i(e={}){const{window:t=document.defaultView,isShowBeforeUnload:n=!1}=e,i=e.basename?(0,a.stripTrailingSlash)((0,a.addLeadingSlash)(e.basename)):"",s=t.history,c=(0,a.createEventList)(),l=(0,a.createEventList)({isNeedResult:!0});let u=o.actionType.pop,f=(0,r.createLocation)({path:t.location.href,basename:i,state:s.state});t.addEventListener(o.PopStateEventType,(e=>{let n=(0,r.createLocation)({path:t.location.href,basename:i,state:s.state});(0,r.createPath)(n)!==(0,r.createPath)(f)&&function(e){if(h)h=!1;else{const t={action:o.actionType.pop,location:e};if(l.length){if(!l.call(t)){const t=f.state.index-e.state.index;h=!0,g(t)}}else d(t)}}(n)}));let h=null;function p(e){const{action:t,location:n}=e;return!l.length||l.call({action:t,location:n})}function d(e){u=e.action,f=e.location,c.call({action:u,location:f})}function g(e){s.go(e)}function y(e){n&&(e.preventDefault(),e.returnValue="")}return{get action(){return u},get location(){return f},createHref:function(e){if("string"==typeof e)return(0,r.createPath)((0,r.createLocation)({path:e,basename:i}))},push:function(e,t){const n=o.actionType.push,a=Object.assign({},t,{index:f.state&&f.state.index+1}),c=(0,r.createLocation)({path:e,state:a,basename:i}),l={action:n,location:c};if(p(l)){try{const e=(0,r.getBaseHref)()+i+(0,r.createPath)(c);s.pushState(a,"",e)}catch(e){console.error(e)}d(l)}},replace:function(e,t){const n=o.actionType.push,a=Object.assign({},t,{index:f.state&&f.state.index+1}),c=(0,r.createLocation)({path:e,state:a,basename:i}),l={action:n,location:c};if(p(l)){try{const e=(0,r.getBaseHref)()+i+(0,r.createPath)(c);s.pushState(a,"",e)}catch(e){console.error(e)}d(l)}},go:g,back:function(){g(-1)},forward:function(){g(1)},listen:function(e){return c.push(e)},block:function(e){let n=l.push(e);return 1===l.length&&t.addEventListener(o.BeforeUnloadEventType,y),()=>{n(),l.length||t.removeEventListener(o.BeforeUnloadEventType,y)}}}}},"./src/createHashHistory.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var a=n("./utils/index.js"),o=n("./config/index.js"),r=n("./utils/LocationUtils.js");function i(e={}){const{window:t=document.defaultView,isShowBeforeUnload:n=!1}=e,i=e.basename?(0,a.stripTrailingSlash)((0,a.addLeadingSlash)(e.basename)):"",s=t.history,c=(0,a.createEventList)(),l=(0,a.createEventList)({isNeedResult:!0});let u=o.actionType.pop,f=(0,r.createLocation)({path:t.location.hash.substr(1),basename:i,state:s.state});t.addEventListener(o.HashChangeEventType,(e=>{let n=(0,r.createLocation)({path:t.location.hash.substr(1),basename:i,state:s.state});(0,r.createPath)(n)!==(0,r.createPath)(f)&&function(e){{const t={action:o.actionType.pop,location:e};if(l.length){if(!l.call(t)){d(f.state.index-e.state.index)}}else p(t)}}(n)}));function h(e){const{action:t,location:n}=e;return!l.length||l.call({action:t,location:n})}function p(e){u=e.action,f=e.location,c.call({action:u,location:f})}function d(e){s.go(e)}function g(e){n&&(e.preventDefault(),e.returnValue="")}return{get action(){return u},get location(){return f},createHref:function(e){if("string"==typeof e)return(0,r.createPath)((0,r.createLocation)({path:e,basename:i}))},push:function(e,t){const n=o.actionType.push,a=Object.assign({},t,{index:f.state&&f.state.index+1}),c=(0,r.createLocation)({path:e,state:a,basename:i}),l={action:n,location:c};if(h(l)){try{const e=(0,r.getBaseHref)()+"#"+i+(0,r.createPath)(c);s.pushState(a,"",e)}catch(e){console.error(e)}p(l)}},replace:function(e,t){const n=o.actionType.push,a=Object.assign({},t,{index:f.state&&f.state.index+1}),c=(0,r.createLocation)({path:e,state:a,basename:i}),l={action:n,location:c};if(h(l)){try{const e=(0,r.getBaseHref)()+"#"+i+(0,r.createPath)(c);s.pushState(a,"",e)}catch(e){console.error(e)}p(l)}},go:d,back:function(){d(-1)},forward:function(){d(1)},listen:function(e){return c.push(e)},block:function(e){let n=l.push(e);return 1===l.length&&t.addEventListener(o.BeforeUnloadEventType,g),()=>{n(),l.length||t.removeEventListener(o.BeforeUnloadEventType,g)}}}}},"./src/index.js":(e,t,n)=>{n.r(t),n.d(t,{createHashHistory:()=>a.default,createBrowserHistory:()=>o.default});var a=n("./src/createHashHistory.js"),o=n("./src/createBrowserHistory.js")},"./utils/LocationUtils.js":(e,t,n)=>{n.r(t),n.d(t,{createLocation:()=>o,parsePath:()=>r,createPath:()=>i,hasBasename:()=>s,stripBasename:()=>c,getBaseHref:()=>l});var a=n("./utils/index.js");function o(e={}){const{path:t,basename:n,key:o=(0,a.getUniqueKey)(),state:i={index:0}}=e;return{...r(t,n),key:o,state:i}}function r(e,t){let n=e||"/",a="",o="";const r=n.indexOf("#");r>-1&&(o=n.substr(r),n=n.substr(0,r));const i=n.indexOf("?");return i>-1&&(a=n.substr(i),n=n.substr(0,i)),n=c(n,t),{pathname:n,search:"?"===a?"":a,hash:"#"===o?"":o}}function i(e={}){const{pathname:t,search:n,hash:a}=e;let o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:`?${n}`),a&&"#"!==a&&(o+="#"===a.charAt(0)?a:`#${a}`),o}function s(e="",t=""){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}function c(e="",t=""){return s(e,t)?e.substr(t.length):e}function l(){let e=document.querySelector("base"),t="";if(e&&e.getAttribute("href")){let e=window.location.href,n=e.indexOf("#");t=-1===n?e:e.slice(0,n)}return t}},"./utils/index.js":(e,t,n)=>{function a(){let e=[];return{get length(){return e.length},push:t=>(e.push(t),()=>{e=e.filter((e=>e!==t))}),call(t){e.forEach((e=>{e&&e(t)}))}}}function o(e=""){let t=Date.now().toString(32)+e.toString(),n=[],a=1,o=0;for(let e=1,r=t.length;e<=r;e++)e===a&&(n[o]=String.fromCharCode(65+Math.floor(22*Math.random())),o++,a*=2),n[o]=t[e-1],o++;return n.join("")}function r(e,t){const n=getValueType(e);if(n!==getValueType(t))return!1;if(n===enumValueType.basic)return e===t;if(n===enumValueType.object){const n=Object.keys(e);for(let a=0,o=n.length;a<o;a++){const o=n[a];if(!r(e[o],t[o]))return!1}}if(i,n===enumValueType.array){if(e.length!==t.length)return falsei;for(let n=0,a=e.length;n<a;n++){if(!r(e[n],t[n]))return!1}}return!1}function s(e){return"/"===e.charAt(0)?e:"/"+e}function c(e){return"/"===e.charAt(0)?e.substr(1):e}function l(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}n.r(t),n.d(t,{createEventList:()=>a,getUniqueKey:()=>o,valueEqual:()=>r,addLeadingSlash:()=>s,stripLeadingSlash:()=>c,stripTrailingSlash:()=>l})}},t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={exports:{}};return e[a](o,o.exports,n),o.exports}return n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n("./src/index.js")})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,