{"version":3,"file":"router-match.js.map","sources":["../utils/path-to-regexp.js","../src/match.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// 词法分析类型\r\nconst tokensType = {\r\n  name: \"NAME\", // 名称\r\n  char: \"CHAR\", // 字符\r\n  open: \"OPEN\", // 开\r\n  close: \"CLOSE\", // 关\r\n  escapedChar: \"ESCAPED_CHAR\", // 分割符\r\n  modifier: \"MODIFIER\", // 修饰符\r\n  pattern: \"PATTERN\", // 范式 是用来描述name的\r\n  end: \"END\", // 结束\r\n};\r\n\r\n/**\r\n * 拆分string\r\n */\r\nfunction escapeString(str) {\r\n  // 将非 ! : $ { } ( ) [ ] / \\ 的都按照转义字符处理,实际上看起来就是将通用的正则表达式中不是数据处理的数据全部剔除\r\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\r\n}\r\n\r\n/**\r\n * 词法分析\r\n * 实际上是分词,只不过这一步的分词主要是处理 范式(pattern) 和 字段名称(name) 这两种类型,其他的情况都简单处理,每个char都可以单独展示\r\n * @param {Array} str\r\n */\r\nfunction lexer(str) {\r\n  let tokens = [];\r\n  let i = 0;\r\n  const strLength = str.length;\r\n  while (i < strLength) {\r\n    const char = str[i];\r\n\r\n    // 处理修饰符\r\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\r\n      tokens.push({ type: tokensType.modifier, index: i, value: char });\r\n      i++;\r\n      continue;\r\n    }\r\n    // 处理分割符\r\n    if (char === \"\\\\\") {\r\n      // TODO 这里和源码实现不一样，源码中应该是将多过了一个字符串\r\n      tokens.push({ type: tokensType.escapedChar, index: i, value: char });\r\n      i++;\r\n      continue;\r\n    }\r\n    // 处理开标签 {\r\n    if (char === \"{\") {\r\n      tokens.push({ type: tokensType.open, index: i, value: char });\r\n      i++;\r\n      continue;\r\n    }\r\n    // 处理闭标签 }\r\n    if (char === \"}\") {\r\n      tokens.push({ type: tokensType.close, index: i, value: char });\r\n      i++;\r\n      continue;\r\n    }\r\n\r\n    // 处理定义的随机类型name\r\n    if (char === \":\") {\r\n      let name = \"\";\r\n      let j = i + 1;\r\n      // 变量只能是0-9 a-z A-Z _(下滑线),这和很多的编程语言中变量的定义是一致的\r\n      while (j < strLength) {\r\n        const code = str.charCodeAt(j);\r\n\r\n        if (\r\n          // `0-9`\r\n          (code >= 48 && code <= 57) ||\r\n          // `A-Z`\r\n          (code >= 65 && code <= 90) ||\r\n          // `a-z`\r\n          (code >= 97 && code <= 122) ||\r\n          // `_`\r\n          code === 95\r\n        ) {\r\n          name += str[j++];\r\n          continue;\r\n        }\r\n\r\n        break;\r\n      }\r\n      // 如果名称不存在,则提示类型错误\r\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\r\n      tokens.push({ type: tokensType.name, index: i, value: name });\r\n      // 跨国中间的值,直接到name之后\r\n      i = j;\r\n      continue;\r\n    }\r\n\r\n    // 处理pattern范式的情况\r\n    if (char === \"(\") {\r\n      let j = i + 1;\r\n      let pattern = \"\";\r\n      // 用来判断是否闭合\r\n      let count = 1;\r\n\r\n      if (str[j] === \"?\") {\r\n        throw new SyntaxError(`Pattern cannot start with \"?\" at ${j}`);\r\n      }\r\n\r\n      while (j < strLength) {\r\n        const patternChar = str[j];\r\n        // 如果是 \\ ,则添加两次,因为在比较的时候,字符串\\\\ 会被转义成 \\ 所以实际上一个\\对应两个字符,需要加两次\r\n        if (patternChar === \"\\\\\") {\r\n          pattern += str[j++] + str[j++];\r\n          continue;\r\n        }\r\n\r\n        if (patternChar === \")\") {\r\n          // 如果是)就闭合判断结束\r\n          count--;\r\n          if (count === 0) {\r\n            j++;\r\n            break;\r\n          }\r\n        } else if (patternChar === \"(\") {\r\n          // 套娃\r\n          count++;\r\n          if (str[j + 1] !== \"?\") {\r\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\r\n          }\r\n        }\r\n\r\n        pattern += str[j++];\r\n      }\r\n      // count 存在说明没有完全闭合或者闭合过多了\r\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\r\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\r\n\r\n      tokens.push({ type: tokensType.pattern, index: i, value: pattern });\r\n      i = j;\r\n      continue;\r\n    }\r\n\r\n    // 不是以上各种情况,就全部认为是 字符 (char)\r\n    tokens.push({ type: tokensType.char, index: i, value: str[i++] });\r\n  }\r\n  tokens.push({ type: tokensType.end, index: i, value: \"\" });\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * 根据词法分析结果 分词 ,或者说是生成一个标准化的数组,用于后续连续性处理\r\n * 返回字符串或者 词法对象\r\n * 词法对象结构\r\n * {\r\n *      modifier:'', // 修饰符\r\n        name:'test', // 名称\r\n        pattern:'[^\\\\/#\\\\?]+?', // 范式（用于实际匹配）\r\n        prefix:'/', // 前缀\r\n        suffix:'', // 后缀\r\n * }\r\n */\r\n// TODO 后续可以考虑将分词器和格式化的统一整合，直接输出分词结果\r\nfunction parse(str, options = {}) {\r\n  const tokens = lexer(str);\r\n  const { prefixes = \"./\" } = options;\r\n  // defaultPattern 应该是一个特性的范式,用来匹配任意值即可,实际上用排除法,在路由的判断里,不能算在路由中的实际上只有 /(pathname) #(hash) ?(search)\r\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\r\n  let i = 0;\r\n  const tokensLength = tokens.length;\r\n  let result = [];\r\n  let path = \"\";\r\n  let key = 0;\r\n\r\n  /**\r\n   * 尝试获取指定类型的值,不存在则返回null\r\n   */\r\n  const tryConsume = (type) => {\r\n    let result = null;\r\n    if (i < tokensLength && tokens[i].type === type) {\r\n      result = tokens[i].value;\r\n      i++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * 必须获取指定值,如果不是指定值则报错\r\n   */\r\n  var mustConsume = function (type) {\r\n    const value = tryConsume(type);\r\n    // 满足期望,则返回值\r\n    if (value !== undefined) {\r\n      return value;\r\n    }\r\n    // 不满足期望则提示\r\n    const { type: nextType, index } = tokens[i];\r\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\r\n  };\r\n  /**\r\n   * 获取固定的前缀\r\n   */\r\n  var consumeText = function () {\r\n    let result = \"\";\r\n    var value;\r\n    while (\r\n      (value =\r\n        tryConsume(tokensType.char) || tryConsume(tokensType.escapedChar))\r\n    ) {\r\n      result += value;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  while (i < tokensLength) {\r\n    // 获取char\r\n    const char = tryConsume(tokensType.char);\r\n    // 获取name 和 pattern\r\n    const name = tryConsume(tokensType.name);\r\n    const pattern = tryConsume(tokensType.pattern);\r\n    // name 或者 pattern 存在说明了存在匹配类型,从本质上看,这两种情况的处理逻辑是一致的,都是设置name值,然后设置范式\r\n    if (name || pattern) {\r\n      // 前缀默认为char的值\r\n      const prefix = char || \"\";\r\n      /**\r\n       * 如果前缀不存在,则表明char是path的一部分,如果前缀存在则直接作为前缀使用即可,还存在一种特殊的场景,就是固定的值后又匹配了对应的数据,是一个动态的路由\r\n       * 举一个例子,动态路由的前缀都是/detail + 对应详情id的形式,用于的场景可能是埋点等,暂时考虑不到实际的使用用途,但是应该有存在的可能性\r\n       */\r\n      if (prefixes.indexOf(prefix) === -1) {\r\n        path += prefix;\r\n        prefix = \"\";\r\n      }\r\n      /**\r\n       * 如果path存在就直接设置了path,因为对于path存在的场景,数据是固定了路由的,所以范式和配置的其他条件都是没有用的\r\n       * 没有前缀的时候,实际上说明上一个数据是一个的固定值,这就可能是一个动态路由的场景\r\n       */\r\n      if (path) {\r\n        result.push(path);\r\n        path = \"\";\r\n      }\r\n      // 需要按照动态参数的匹配场景处理,有name就使用name,没有就默认key值即可,对于一个url而言,实际上基本key不会太多,修饰符标识1个多个的关系,就是正则表达式中的+ ? *\r\n      result.push({\r\n        name: name || key++,\r\n        prefix,\r\n        suffix: \"\",\r\n        pattern: pattern || defaultPattern,\r\n        modifier: tryConsume(tokensType.modifier) || \"\",\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // 分割符当作是路由的一部分,可能属于一种奇怪的路由形式,其他情况就是不断的拼接char,知道无法拼接完成(本质上是将之前拆分的分词组合起来)\r\n    const value = char || tryConsume(tokensType.escapedChar);\r\n    if (value) {\r\n      path += value;\r\n      continue;\r\n    }\r\n\r\n    // 如果path存在就直接填充\r\n    if (path) {\r\n      result.push(path);\r\n      path = \"\";\r\n      continue;\r\n    }\r\n\r\n    const open = tryConsume(tokensType.open);\r\n    if (open) {\r\n      /**\r\n       * open中的内容实际上也只包含三种类型,首先前面char类型的,一开始获取到的char类型的实际上都是前缀,因为这部分是不变的\r\n       * 然后获取到的类型为 name 和 pattern 两种,  最后的char类型按照后缀来\r\n       * 但是必须要open close 组合结尾,不能多个open,这种情况不做处理\r\n       */\r\n      const prefix = consumeText();\r\n      const name = tryConsume(tokensType.name) || \"\";\r\n      const pattern = tryConsume(tokensType.pattern) || \"\";\r\n      const suffix = consumeText();\r\n      mustConsume(tokensType.close);\r\n      // 插入判断类型,name只有在存在 name 或者 pattern 的时候才是有价值的，否则实际上就是一个固定值\r\n      result.push({\r\n        name: name || (pattern ? key++ : \"\"),\r\n        prefix,\r\n        suffix,\r\n        pattern: name && !pattern ? defaultPattern : pattern,\r\n        modifier: tryConsume(tokensType.modifier) || \"\",\r\n      });\r\n      continue;\r\n    }\r\n    // 当所有的情况都不匹配的时候,必须是end结尾\r\n    mustConsume(tokensType.end);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * 判断是否区分大小写\r\n */\r\nfunction flags(options) {\r\n  return options && options.sensitive ? \"\" : \"i\";\r\n}\r\n\r\n/**\r\n * 将分词处理过的数据,转换成正则表达式\r\n */\r\nfunction tokensToRegexp(tokens, keys, options) {\r\n  const {\r\n    strict = false,\r\n    start = true,\r\n    end = true,\r\n    encode = (x) => x,\r\n  } = options;\r\n  // 设置的结尾字符转义化处理\r\n  const endsWith = `[${escapeString(options.endsWith || \"\")}]|$`;\r\n  // 匹配的最后一个词的转义化处理\r\n  const delimiter = `[${escapeString(options.delimiter || \"/#?\")}]`;\r\n  let route = start ? \"^\" : \"\";\r\n\r\n  // 遍历分词数组\r\n  for (const token of tokens) {\r\n    // 如果是字符串就直接拼接到route中\r\n    if (typeof token === \"string\") {\r\n      route += escapeString(encode(token));\r\n    } else {\r\n      // 分词对象的时候，先处理前后缀的正则\r\n      const prefix = escapeString(encode(token.prefix));\r\n      const suffix = escapeString(encode(token.suffix));\r\n\r\n      // 如果存在范式\r\n      if (token.pattern) {\r\n        // 设置在keys中主要是为了后续处理url中params数据\r\n        if (keys) {\r\n          keys.push(token);\r\n        }\r\n\r\n        if (prefix || suffix) {\r\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\r\n            // 将 + 和 * 单独处理了，即手动的设置一个存在的，然后再设置一个* 的，然后整体为 ?\r\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\r\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\r\n          } else {\r\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\r\n          }\r\n        } else {\r\n          // 没有前后缀就直接设置正则即可\r\n          route += `(${token.pattern})${token.modifier}`;\r\n        }\r\n      } else {\r\n        // TODO 没有范式，说明是??? ,没考虑清楚\r\n        route += `(?:${prefix}${suffix})${token.modifier}`;\r\n      }\r\n    }\r\n  }\r\n  // 是否字符串的结尾匹配\r\n  if (end) {\r\n    // 允许尾部分割符处理\r\n    if (!strict) {\r\n      route += `${delimiter}?`;\r\n    }\r\n    // 是否设置结束字符，如果没有则默认为$ 否则指定固定值\r\n    route += !options.endsWith ? \"$\" : `(?=${endsWith})`;\r\n  } else {\r\n    // 如果最后以是字符串，则判断是否是尾部分割符\r\n    const endToken = tokens[tokens.length - 1];\r\n    const isEndDelimited =\r\n      typeof endToken === \"string\"\r\n        ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\r\n        : // tslint:disable-next-line\r\n          endToken === undefined;\r\n\r\n    // 允许尾部分割符处理\r\n    if (!strict) {\r\n      route += `(?:${delimiter}(?=${endsWith}))?`;\r\n    }\r\n\r\n    // 最后一个不是结束分割符的时候，手动添加\r\n    if (!isEndDelimited) {\r\n      route += `(?=${delimiter}|${endsWith})`;\r\n    }\r\n  }\r\n\r\n  return new RegExp(route, flags(options));\r\n}\r\n\r\n/**\r\n * 字符串处理\r\n */\r\nfunction stringToRegexp(path, keys, options) {\r\n  return tokensToRegexp(parse(path, options), keys, options);\r\n}\r\n\r\n/**\r\n * 正则转正则\r\n */\r\nfunction regexpToRegexp(path, keys) {\r\n  // 正则的处理如果没有keys的，直接返回即可\r\n  if (!keys) return path;\r\n  // TODO 只明白了要将 没懂  \\( 开头   (?:\\?<(.*?)>) 非获取匹配?<任意值> 的数据    (.*?) 任意字符存在0个或1个，并获取      (?!\\?) 为非?\r\n  const groupsRegexp = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\r\n\r\n  let index = 0;\r\n  let execResult = groupsRegexp.exec(path.source);\r\n  while (execResult) {\r\n    keys.push({\r\n      // Use parenthesized substring match if available, index otherwise\r\n      name: execResult[1] || index++,\r\n      prefix: \"\",\r\n      suffix: \"\",\r\n      modifier: \"\",\r\n      pattern: \"\",\r\n    });\r\n    execResult = groupsRegex.exec(path.source);\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\n/**\r\n * 数组转正则\r\n */\r\nfunction arrayToRegexp(paths, keys, options) {\r\n  // 循环调用paths，每个单独处理，然后生成一个| 的匹配形式的正则\r\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\r\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\r\n}\r\n\r\n/**\r\n *\r\n * @param {String|Array|RegExp} path\r\n * @param {Array} keys\r\n * @param {Object} options\r\n */\r\nfunction pathToRegexp(path, keys, options) {\r\n  // TODO 数组和正则的都不太了解使用场景\r\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\r\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\r\n  return stringToRegexp(path, keys, options);\r\n}\n\nexports.pathToRegexp = pathToRegexp;\n//# sourceMappingURL=path-to-regexp.js.map\n","import { pathToRegexp } from \"../utils/path-to-regexp\";\r\n/**\r\n * 缓存判断过的数据\r\n */\r\nlet cache = {};\r\nlet cachePathList = [];\r\nconst cacheLimit = 10000;\r\nlet cacheCount = 0;\r\n/**\r\n * 比较判断path\r\n * @param {*} path\r\n * @param {*} options\r\n */\r\nexport function compilePath(path, options = {}) {\r\n\tif (cache[path]) {\r\n\t\treturn cache[path];\r\n\t}\r\n\tlet keys = [];\r\n\tconst regexp = pathToRegexp(path, keys, options);\r\n\tconst result = { regexp, keys };\r\n\r\n\tif (cacheCount < cacheLimit) {\r\n\t\tcache[path] = result;\r\n\t\tcachePathList.push(path);\r\n\t\tcacheCount++;\r\n\t} else {\r\n\t\t// 这里采用操作系统的缓存算法，考虑到整体的复杂度，感觉还是使用先进先出算法(FIFO)容易一点，可以考虑其他缓存算法\r\n\t\tconst removePath = cachePathList.shift();\r\n\t\tdelete cache[removePath];\r\n\t\tcache[path] = result;\r\n\t\tcachePathList.push(path);\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * 判断是否符合路由条件\r\n * @param {*} path\r\n * @param {*} target\r\n */\r\nexport function matchPath(locationPath, options = {}) {\r\n\tif (typeof options === \"string\" || Array.isArray(options)) {\r\n\t\toptions = { path: options };\r\n\t}\r\n\tconst {\r\n\t\tpath, // 地址\r\n\t\texact = false, // 用于匹配结尾\r\n\t\tstrict = false, // 详细匹配\r\n\t\tsensitive = false, // 大小写敏感,true 不区分 false区分\r\n\t} = options;\r\n\r\n\t// 避免options 是 数组的情况\r\n\tconst paths = [].concat(path);\r\n\t// 只处理数组的第一个，其他\r\n\treturn paths.reduce((matched, path) => {\r\n\t\tif (!path && path !== \"\") return null;\r\n\t\tif (matched) return matched;\r\n\t\tconst options = {\r\n\t\t\tend: exact,\r\n\t\t\tstrict,\r\n\t\t\tsensitive,\r\n\t\t};\r\n\t\t// 生成path的正则表达式\r\n\t\tconst { regexp, keys } = compilePath(path, options);\r\n\r\n\t\t// 判断是否匹配路由哦\r\n\t\tconst match = regexp.exec(locationPath);\r\n\r\n\t\tif (!match) return null;\r\n\t\t// 第一个值是匹配到的url内容，后面的对应:test 这种动态路由的值\r\n\t\tconst [url, ...values] = match;\r\n\t\tconst isExact = locationPath === url;\r\n\r\n\t\t// 不匹配的时候返回null\r\n\t\tif (exact && !isExact) return null;\r\n\t\t// TODO 这里需要考虑一个问题，如果存在两个都能匹配到的路由的时候，优先级是怎么样的\r\n\t\treturn {\r\n\t\t\tpath, // the path used to match\r\n\t\t\turl: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\r\n\t\t\tisExact, // whether or not we matched exactly\r\n\t\t\tparams: keys.reduce((memo, key, index) => {\r\n\t\t\t\t// 生成params对象\r\n\t\t\t\tmemo[key.name] = values[index];\r\n\t\t\t\treturn memo;\r\n\t\t\t}, {}),\r\n\t\t};\r\n\t}, null);\r\n}\r\n"],"names":["pathToRegexp"],"mappings":"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"}